
FatFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e38  08005e38  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e40  08005e40  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000007c  08005ec4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08005ec4  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f5b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9f  00000000  00000000  0002a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000761  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c36  00000000  00000000  0002d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6f7  00000000  00000000  00044c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000882b4  00000000  00000000  00053366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d40  00000000  00000000  000db61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000de35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005954 	.word	0x08005954

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08005954 	.word	0x08005954

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b092      	sub	sp, #72	; 0x48
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 faf5 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f8c9 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f957 	bl	8000794 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e6:	f000 f923 	bl	8000730 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004ea:	f001 fe59 	bl	80021a0 <MX_FATFS_Init>
  FRESULT status;

  uint8_t *image;
  bmp_t propertiesBmp;

  fatfs = malloc(sizeof(FATFS));
 80004ee:	f44f 700d 	mov.w	r0, #564	; 0x234
 80004f2:	f004 fd8f 	bl	8005014 <malloc>
 80004f6:	4603      	mov	r3, r0
 80004f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  file = malloc(sizeof(FIL));
 80004fa:	f44f 700c 	mov.w	r0, #560	; 0x230
 80004fe:	f004 fd89 	bl	8005014 <malloc>
 8000502:	4603      	mov	r3, r0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// File Disk Mount
  	status = f_mount(fatfs, "", 0);
 8000506:	2200      	movs	r2, #0
 8000508:	4956      	ldr	r1, [pc, #344]	; (8000664 <main+0x190>)
 800050a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800050c:	f003 ff14 	bl	8004338 <f_mount>
 8000510:	4603      	mov	r3, r0
 8000512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  	if(status != FR_OK) printf("disk is not ready\n");
 8000516:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <main+0x50>
 800051e:	4852      	ldr	r0, [pc, #328]	; (8000668 <main+0x194>)
 8000520:	f004 ff30 	bl	8005384 <puts>
  	// File Open
  	status = f_open(file, "test.bmp", FA_READ);
 8000524:	2201      	movs	r2, #1
 8000526:	4951      	ldr	r1, [pc, #324]	; (800066c <main+0x198>)
 8000528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800052a:	f003 ff4b 	bl	80043c4 <f_open>
 800052e:	4603      	mov	r3, r0
 8000530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  	if(status != FR_OK) printf("file not found!\n");
 8000534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <main+0x6e>
 800053c:	484c      	ldr	r0, [pc, #304]	; (8000670 <main+0x19c>)
 800053e:	f004 ff21 	bl	8005384 <puts>
  	// Read Header
  	f_read(file, propertiesBmp.bmpType, 2, NULL);
 8000542:	f107 0110 	add.w	r1, r7, #16
 8000546:	2300      	movs	r3, #0
 8000548:	2202      	movs	r2, #2
 800054a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800054c:	f004 f8f8 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bmpSize, 4, NULL);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	1c99      	adds	r1, r3, #2
 8000556:	2300      	movs	r3, #0
 8000558:	2204      	movs	r2, #4
 800055a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800055c:	f004 f8f0 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bmpReserved, 4, NULL);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	1d99      	adds	r1, r3, #6
 8000566:	2300      	movs	r3, #0
 8000568:	2204      	movs	r2, #4
 800056a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800056c:	f004 f8e8 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bmpOffset, 4, NULL);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	f103 010a 	add.w	r1, r3, #10
 8000578:	2300      	movs	r3, #0
 800057a:	2204      	movs	r2, #4
 800057c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800057e:	f004 f8df 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bidSize, 4, NULL);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	f103 010e 	add.w	r1, r3, #14
 800058a:	2300      	movs	r3, #0
 800058c:	2204      	movs	r2, #4
 800058e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000590:	f004 f8d6 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bidwidth, 4, NULL);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	f103 0112 	add.w	r1, r3, #18
 800059c:	2300      	movs	r3, #0
 800059e:	2204      	movs	r2, #4
 80005a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005a2:	f004 f8cd 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bidHeight, 4, NULL);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	f103 0116 	add.w	r1, r3, #22
 80005ae:	2300      	movs	r3, #0
 80005b0:	2204      	movs	r2, #4
 80005b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005b4:	f004 f8c4 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bidColorPlan, 2, NULL);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	f103 011a 	add.w	r1, r3, #26
 80005c0:	2300      	movs	r3, #0
 80005c2:	2202      	movs	r2, #2
 80005c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005c6:	f004 f8bb 	bl	8004740 <f_read>
  	f_read(file, propertiesBmp.bidBitPerPixed, 2, NULL);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	f103 011c 	add.w	r1, r3, #28
 80005d2:	2300      	movs	r3, #0
 80005d4:	2202      	movs	r2, #2
 80005d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005d8:	f004 f8b2 	bl	8004740 <f_read>
 80005dc:	f8d7 3012 	ldr.w	r3, [r7, #18]
  	uint32_t offset, width, height;
  	memcpy(&offset, propertiesBmp.bmpSize, 4);
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
  	memcpy(&width, propertiesBmp.bidwidth, 4);
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
  	memcpy(&height, propertiesBmp.bidHeight, 4);
 80005ec:	607b      	str	r3, [r7, #4]
  	// Jump to Image Start Address
  	f_lseek(file, offset);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005f4:	f004 f9e3 	bl	80049be <f_lseek>
  	// Read Image
  	image = malloc(width*height*3); // RGB = 3 channel, Allocate Dynamic Memory Size of Image
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	fb03 f202 	mul.w	r2, r3, r2
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fd04 	bl	8005014 <malloc>
 800060c:	4603      	mov	r3, r0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  	for(int y=0; y<height; y++) {
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
 8000614:	e020      	b.n	8000658 <main+0x184>
  		for(int x=0; x<width; x++) {
 8000616:	2300      	movs	r3, #0
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
 800061a:	e016      	b.n	800064a <main+0x176>
  			f_read(file, &image[(x*3)+(y*width*3)], 3, NULL); // Read Algorithm, image data is stored in image pointer(=array)
 800061c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	4619      	mov	r1, r3
 8000626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	fb03 f202 	mul.w	r2, r3, r2
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	440b      	add	r3, r1
 8000636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000638:	18d1      	adds	r1, r2, r3
 800063a:	2300      	movs	r3, #0
 800063c:	2203      	movs	r2, #3
 800063e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000640:	f004 f87e 	bl	8004740 <f_read>
  		for(int x=0; x<width; x++) {
 8000644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000646:	3301      	adds	r3, #1
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
 800064a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e4      	bcc.n	800061c <main+0x148>
  	for(int y=0; y<height; y++) {
 8000652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000654:	3301      	adds	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
 8000658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3da      	bcc.n	8000616 <main+0x142>
  {
 8000660:	e751      	b.n	8000506 <main+0x32>
 8000662:	bf00      	nop
 8000664:	0800596c 	.word	0x0800596c
 8000668:	08005970 	.word	0x08005970
 800066c:	08005984 	.word	0x08005984
 8000670:	08005990 	.word	0x08005990

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 ff5e 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xb4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xb4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <SystemClock_Config+0xb8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SystemClock_Config+0xb8>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fccb 	bl	8001080 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f0:	f000 f86a 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff2e 	bl	8001570 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071a:	f000 f855 	bl	80007c8 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_SPI1_Init+0x5c>)
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_SPI1_Init+0x60>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x5c>)
 800075a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x5c>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x5c>)
 800077a:	f001 f8a5 	bl	80018c8 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f820 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000098 	.word	0x20000098
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_GPIO_Init+0x30>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <MX_GPIO_Init+0x30>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_GPIO_Init+0x30>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_SPI_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_SPI_MspInit+0x88>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_SPI_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800087e:	23e0      	movs	r3, #224	; 0xe0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088e:	2305      	movs	r3, #5
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_SPI_MspInit+0x8c>)
 800089a:	f000 fa6d 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40013000 	.word	0x40013000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f934 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e009      	b.n	8000968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf1      	blt.n	8000954 <_write+0x12>
  }
  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a2:	605a      	str	r2, [r3, #4]
  return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_isatty>:

int _isatty(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f004 fdf4 	bl	8005600 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20020000 	.word	0x20020000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	200000f0 	.word	0x200000f0
 8000a4c:	20000480 	.word	0x20000480

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f004 fdb3 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd15 	bl	80004d4 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ab8:	08005e48 	.word	0x08005e48
  ldr r2, =_sbss
 8000abc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ac0:	20000480 	.word	0x20000480

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f90d 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe6a 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f917 	bl	8000d5e <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f8ed 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200000f4 	.word	0x200000f4

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200000f4 	.word	0x200000f4

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e159      	b.n	8001048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8148 	bne.w	8001042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_GPIO_Init+0x2f4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x1fe>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x1f6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x1f2>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_GPIO_Init+0x304>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x304>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_GPIO_Init+0x304>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aea2 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e267      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d075      	beq.n	800118a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109e:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d00c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d112      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b6:	4b82      	ldr	r3, [pc, #520]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010c2:	d10b      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d05b      	beq.n	8001188 <HAL_RCC_OscConfig+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d157      	bne.n	8001188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e242      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x74>
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a75      	ldr	r2, [pc, #468]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b70      	ldr	r3, [pc, #448]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6f      	ldr	r2, [pc, #444]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b6d      	ldr	r3, [pc, #436]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6c      	ldr	r2, [pc, #432]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 8001118:	4b69      	ldr	r3, [pc, #420]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a68      	ldr	r2, [pc, #416]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fd2c 	bl	8000b94 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fd28 	bl	8000b94 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e207      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xc0>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fd18 	bl	8000b94 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fd14 	bl	8000b94 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1f3      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0xe8>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1c7      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4937      	ldr	r1, [pc, #220]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e03a      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_RCC_OscConfig+0x244>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fccd 	bl	8000b94 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fcc9 	bl	8000b94 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1a8      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_RCC_OscConfig+0x244>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fcac 	bl	8000b94 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fca8 	bl	8000b94 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e187      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d036      	beq.n	80012d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d016      	beq.n	80012a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_RCC_OscConfig+0x248>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fc8c 	bl	8000b94 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fc88 	bl	8000b94 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e167      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x200>
 800129e:	e01b      	b.n	80012d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_RCC_OscConfig+0x248>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fc75 	bl	8000b94 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	e00e      	b.n	80012cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc71 	bl	8000b94 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d907      	bls.n	80012cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e150      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
 80012c0:	40023800 	.word	0x40023800
 80012c4:	42470000 	.word	0x42470000
 80012c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1ea      	bne.n	80012ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8097 	beq.w	8001414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b7d      	ldr	r3, [pc, #500]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a7c      	ldr	r2, [pc, #496]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a73      	ldr	r2, [pc, #460]	; (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fc31 	bl	8000b94 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fc2d 	bl	8000b94 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e10c      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <HAL_RCC_OscConfig+0x474>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x2ea>
 800135c:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
 8001368:	e01c      	b.n	80013a4 <HAL_RCC_OscConfig+0x324>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x30c>
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001382:	4a5b      	ldr	r2, [pc, #364]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6713      	str	r3, [r2, #112]	; 0x70
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0x324>
 800138c:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	4a57      	ldr	r2, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	; 0x70
 8001398:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800139e:	f023 0304 	bic.w	r3, r3, #4
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d015      	beq.n	80013d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ac:	f7ff fbf2 	bl	8000b94 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fbee 	bl	8000b94 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e0cb      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ee      	beq.n	80013b4 <HAL_RCC_OscConfig+0x334>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fbdc 	bl	8000b94 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fbd8 	bl	8000b94 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0b5      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ee      	bne.n	80013e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a1 	beq.w	8001560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d05c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d141      	bne.n	80014b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_RCC_OscConfig+0x478>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fbac 	bl	8000b94 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fba8 	bl	8000b94 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e087      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	491b      	ldr	r1, [pc, #108]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x478>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb81 	bl	8000b94 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fb7d 	bl	8000b94 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e05c      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x416>
 80014b4:	e054      	b.n	8001560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb6a 	bl	8000b94 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb66 	bl	8000b94 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e045      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x444>
 80014e2:	e03d      	b.n	8001560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e038      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x4ec>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d028      	beq.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d121      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d11a      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800152c:	4013      	ands	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d107      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0cc      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d90c      	bls.n	80015ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0b8      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	494d      	ldr	r1, [pc, #308]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d044      	beq.n	8001690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d119      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e07f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d003      	beq.n	800162e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162a:	2b03      	cmp	r3, #3
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b3b      	ldr	r3, [pc, #236]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e067      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f023 0203 	bic.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4934      	ldr	r1, [pc, #208]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff fa98 	bl	8000b94 <HAL_GetTick>
 8001664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	e00a      	b.n	800167e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fa94 	bl	8000b94 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e04f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1eb      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d20c      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e032      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4916      	ldr	r1, [pc, #88]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016f6:	f000 f821 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	5ccb      	ldrb	r3, [r1, r3]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f9f8 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00
 800172c:	40023800 	.word	0x40023800
 8001730:	080059e8 	.word	0x080059e8
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001740:	b090      	sub	sp, #64	; 0x40
 8001742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d00d      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x40>
 8001760:	2b08      	cmp	r3, #8
 8001762:	f200 80a1 	bhi.w	80018a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x34>
 800176a:	2b04      	cmp	r3, #4
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x3a>
 800176e:	e09b      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001770:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001774:	e09b      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800177a:	e098      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d028      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	2200      	movs	r2, #0
 800179a:	623b      	str	r3, [r7, #32]
 800179c:	627a      	str	r2, [r7, #36]	; 0x24
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017a4:	2100      	movs	r1, #0
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a8:	fb03 f201 	mul.w	r2, r3, r1
 80017ac:	2300      	movs	r3, #0
 80017ae:	fb00 f303 	mul.w	r3, r0, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b6:	fba0 1202 	umull	r1, r2, r0, r2
 80017ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017bc:	460a      	mov	r2, r1
 80017be:	62ba      	str	r2, [r7, #40]	; 0x28
 80017c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c2:	4413      	add	r3, r2
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	2200      	movs	r2, #0
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	61fa      	str	r2, [r7, #28]
 80017ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017d6:	f7fe fcff 	bl	80001d8 <__aeabi_uldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4613      	mov	r3, r2
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e2:	e053      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	2200      	movs	r2, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	617a      	str	r2, [r7, #20]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017f6:	f04f 0b00 	mov.w	fp, #0
 80017fa:	4652      	mov	r2, sl
 80017fc:	465b      	mov	r3, fp
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0159      	lsls	r1, r3, #5
 8001808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180c:	0150      	lsls	r0, r2, #5
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ebb2 080a 	subs.w	r8, r2, sl
 8001816:	eb63 090b 	sbc.w	r9, r3, fp
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800182a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800182e:	ebb2 0408 	subs.w	r4, r2, r8
 8001832:	eb63 0509 	sbc.w	r5, r3, r9
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	00eb      	lsls	r3, r5, #3
 8001840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001844:	00e2      	lsls	r2, r4, #3
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
 800184a:	eb14 030a 	adds.w	r3, r4, sl
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	eb45 030b 	adc.w	r3, r5, fp
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4629      	mov	r1, r5
 8001864:	028b      	lsls	r3, r1, #10
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800186c:	4621      	mov	r1, r4
 800186e:	028a      	lsls	r2, r1, #10
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	2200      	movs	r2, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	60fa      	str	r2, [r7, #12]
 800187c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001880:	f7fe fcaa 	bl	80001d8 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800189c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3740      	adds	r7, #64	; 0x40
 80018b4:	46bd      	mov	sp, r7
 80018b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	017d7840 	.word	0x017d7840

080018c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07b      	b.n	80019d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018ea:	d009      	beq.n	8001900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
 80018f2:	e005      	b.n	8001900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe ff82 	bl	8000824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	ea42 0103 	orr.w	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0104 	and.w	r1, r3, #4
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f003 0210 	and.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af02      	add	r7, sp, #8
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f6:	d112      	bne.n	8001a1e <HAL_SPI_Receive+0x44>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10e      	bne.n	8001a1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2204      	movs	r2, #4
 8001a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f8f1 	bl	8001bfc <HAL_SPI_TransmitReceive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	e0ea      	b.n	8001bf4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_SPI_Receive+0x52>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0e3      	b.n	8001bf4 <HAL_SPI_Receive+0x21a>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a34:	f7ff f8ae 	bl	8000b94 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d002      	beq.n	8001a4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a4a:	e0ca      	b.n	8001be2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_SPI_Receive+0x7e>
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a5c:	e0c1      	b.n	8001be2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2204      	movs	r2, #4
 8001a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad0:	2b40      	cmp	r3, #64	; 0x40
 8001ad2:	d007      	beq.n	8001ae4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d162      	bne.n	8001bb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001aec:	e02e      	b.n	8001b4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d115      	bne.n	8001b28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f103 020c 	add.w	r2, r3, #12
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b26:	e011      	b.n	8001b4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b28:	f7ff f834 	bl	8000b94 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d803      	bhi.n	8001b40 <HAL_SPI_Receive+0x166>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d102      	bne.n	8001b46 <HAL_SPI_Receive+0x16c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001b4a:	e04a      	b.n	8001be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1cb      	bne.n	8001aee <HAL_SPI_Receive+0x114>
 8001b56:	e031      	b.n	8001bbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d113      	bne.n	8001b8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	b292      	uxth	r2, r2
 8001b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	1c9a      	adds	r2, r3, #2
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b8c:	e011      	b.n	8001bb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b8e:	f7ff f801 	bl	8000b94 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d803      	bhi.n	8001ba6 <HAL_SPI_Receive+0x1cc>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d102      	bne.n	8001bac <HAL_SPI_Receive+0x1d2>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001bb0:	e017      	b.n	8001be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1cd      	bne.n	8001b58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa45 	bl	8002050 <SPI_EndRxTransaction>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
 8001bde:	e000      	b.n	8001be2 <HAL_SPI_Receive+0x208>
  }

error :
 8001be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_SPI_TransmitReceive+0x26>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e18a      	b.n	8001f38 <HAL_SPI_TransmitReceive+0x33c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c2a:	f7fe ffb3 	bl	8000b94 <HAL_GetTick>
 8001c2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d00f      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x70>
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c52:	d107      	bne.n	8001c64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <HAL_SPI_TransmitReceive+0x68>
 8001c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d003      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
 8001c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c6a:	e15b      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_SPI_TransmitReceive+0x82>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_SPI_TransmitReceive+0x82>
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c84:	e14e      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b40      	cmp	r3, #64	; 0x40
 8001cdc:	d007      	beq.n	8001cee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf6:	d178      	bne.n	8001dea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_SPI_TransmitReceive+0x10a>
 8001d00:	8b7b      	ldrh	r3, [r7, #26]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d166      	bne.n	8001dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	881a      	ldrh	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	1c9a      	adds	r2, r3, #2
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d2a:	e053      	b.n	8001dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d11b      	bne.n	8001d72 <HAL_SPI_TransmitReceive+0x176>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <HAL_SPI_TransmitReceive+0x176>
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d113      	bne.n	8001d72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	881a      	ldrh	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	1c9a      	adds	r2, r3, #2
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d119      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x1b8>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	b292      	uxth	r2, r2
 8001d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001db4:	f7fe feee 	bl	8000b94 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d807      	bhi.n	8001dd4 <HAL_SPI_TransmitReceive+0x1d8>
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d003      	beq.n	8001dd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dd2:	e0a7      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1a6      	bne.n	8001d2c <HAL_SPI_TransmitReceive+0x130>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1a1      	bne.n	8001d2c <HAL_SPI_TransmitReceive+0x130>
 8001de8:	e07c      	b.n	8001ee4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x1fc>
 8001df2:	8b7b      	ldrh	r3, [r7, #26]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d16b      	bne.n	8001ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	330c      	adds	r3, #12
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e1e:	e057      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d11c      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x26c>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d017      	beq.n	8001e68 <HAL_SPI_TransmitReceive+0x26c>
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d114      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d119      	bne.n	8001eaa <HAL_SPI_TransmitReceive+0x2ae>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d014      	beq.n	8001eaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001eaa:	f7fe fe73 	bl	8000b94 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d803      	bhi.n	8001ec2 <HAL_SPI_TransmitReceive+0x2c6>
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d102      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x2cc>
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ece:	e029      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1a2      	bne.n	8001e20 <HAL_SPI_TransmitReceive+0x224>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d19d      	bne.n	8001e20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f917 	bl	800211c <SPI_EndRxTxTransaction>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f00:	e010      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	e000      	b.n	8001f24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f50:	f7fe fe20 	bl	8000b94 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f60:	f7fe fe18 	bl	8000b94 <HAL_GetTick>
 8001f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	015b      	lsls	r3, r3, #5
 8001f6c:	0d1b      	lsrs	r3, r3, #20
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f76:	e054      	b.n	8002022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d050      	beq.n	8002022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f80:	f7fe fe08 	bl	8000b94 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d902      	bls.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d13d      	bne.n	8002012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fae:	d111      	bne.n	8001fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb8:	d004      	beq.n	8001fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d107      	bne.n	8001fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fdc:	d10f      	bne.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e017      	b.n	8002042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3b01      	subs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4013      	ands	r3, r2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	429a      	cmp	r2, r3
 800203e:	d19b      	bne.n	8001f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002064:	d111      	bne.n	800208a <SPI_EndRxTransaction+0x3a>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206e:	d004      	beq.n	800207a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d107      	bne.n	800208a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002092:	d12a      	bne.n	80020ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d012      	beq.n	80020c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff ff49 	bl	8001f40 <SPI_WaitFlagStateUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02d      	beq.n	8002110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e026      	b.n	8002112 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff ff36 	bl	8001f40 <SPI_WaitFlagStateUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e013      	b.n	8002112 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	2101      	movs	r1, #1
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff23 	bl	8001f40 <SPI_WaitFlagStateUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e000      	b.n	8002112 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <SPI_EndRxTxTransaction+0x7c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <SPI_EndRxTxTransaction+0x80>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0d5b      	lsrs	r3, r3, #21
 8002134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002146:	d112      	bne.n	800216e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fef4 	bl	8001f40 <SPI_WaitFlagStateUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e00f      	b.n	800218e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3b01      	subs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d0f2      	beq.n	800216e <SPI_EndRxTxTransaction+0x52>
 8002188:	e000      	b.n	800218c <SPI_EndRxTxTransaction+0x70>
        break;
 800218a:	bf00      	nop
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000
 800219c:	165e9f81 	.word	0x165e9f81

080021a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <MX_FATFS_Init+0x18>)
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_FATFS_Init+0x1c>)
 80021a8:	f002 fe5e 	bl	8004e68 <FATFS_LinkDriver>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <MX_FATFS_Init+0x20>)
 80021b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200000fc 	.word	0x200000fc
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	200000f8 	.word	0x200000f8

080021c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80021c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <USER_initialize+0x24>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <USER_initialize+0x24>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000009 	.word	0x20000009

080021fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <USER_status+0x24>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <USER_status+0x24>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000009 	.word	0x20000009

08002224 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		HAL_SPI_Receive(&hspi1, buff, sizeof(buff), 10);
 8002234:	230a      	movs	r3, #10
 8002236:	2204      	movs	r2, #4
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <USER_read+0x28>)
 800223c:	f7ff fbcd 	bl	80019da <HAL_SPI_Receive>
    return RES_OK;
 8002240:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000098 	.word	0x20000098

08002250 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002260:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	603a      	str	r2, [r7, #0]
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	460b      	mov	r3, r1
 800227c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
    return res;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <disk_status+0x30>)
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	79fa      	ldrb	r2, [r7, #7]
 80022a8:	4905      	ldr	r1, [pc, #20]	; (80022c0 <disk_status+0x30>)
 80022aa:	440a      	add	r2, r1
 80022ac:	7a12      	ldrb	r2, [r2, #8]
 80022ae:	4610      	mov	r0, r2
 80022b0:	4798      	blx	r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000328 	.word	0x20000328

080022c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <disk_initialize+0x48>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <disk_initialize+0x48>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <disk_initialize+0x48>)
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	79fa      	ldrb	r2, [r7, #7]
 80022f2:	4906      	ldr	r1, [pc, #24]	; (800230c <disk_initialize+0x48>)
 80022f4:	440a      	add	r2, r1
 80022f6:	7a12      	ldrb	r2, [r2, #8]
 80022f8:	4610      	mov	r0, r2
 80022fa:	4798      	blx	r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000328 	.word	0x20000328

08002310 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <disk_read+0x3c>)
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	689c      	ldr	r4, [r3, #8]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <disk_read+0x3c>)
 8002330:	4413      	add	r3, r2
 8002332:	7a18      	ldrb	r0, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	47a0      	blx	r4
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002340:	7dfb      	ldrb	r3, [r7, #23]
}
 8002342:	4618      	mov	r0, r3
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	20000328 	.word	0x20000328

08002350 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <disk_write+0x3c>)
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	68dc      	ldr	r4, [r3, #12]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <disk_write+0x3c>)
 8002370:	4413      	add	r3, r2
 8002372:	7a18      	ldrb	r0, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	47a0      	blx	r4
 800237c:	4603      	mov	r3, r0
 800237e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002380:	7dfb      	ldrb	r3, [r7, #23]
}
 8002382:	4618      	mov	r0, r3
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	20000328 	.word	0x20000328

08002390 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80023b2:	89fb      	ldrh	r3, [r7, #14]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3303      	adds	r3, #3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	3202      	adds	r2, #2
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	3201      	adds	r2, #1
 80023e6:	7812      	ldrb	r2, [r2, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	1c53      	adds	r3, r2, #1
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	6179      	str	r1, [r7, #20]
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f1      	bne.n	80024ae <mem_cpy+0x1a>
	}
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	617a      	str	r2, [r7, #20]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f3      	bne.n	80024e6 <mem_set+0x10>
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	61fa      	str	r2, [r7, #28]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	61ba      	str	r2, [r7, #24]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3b01      	subs	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <mem_cmp+0x40>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0eb      	beq.n	8002524 <mem_cmp+0x18>

	return r;
 800254c:	697b      	ldr	r3, [r7, #20]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002564:	e002      	b.n	800256c <chk_chr+0x12>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <chk_chr+0x26>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4293      	cmp	r3, r2
 800257e:	d1f2      	bne.n	8002566 <chk_chr+0xc>
	return *str;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e029      	b.n	80025f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80025a4:	4a27      	ldr	r2, [pc, #156]	; (8002644 <chk_lock+0xb4>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80025b2:	4a24      	ldr	r2, [pc, #144]	; (8002644 <chk_lock+0xb4>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4413      	add	r3, r2
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d116      	bne.n	80025f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <chk_lock+0xb4>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10c      	bne.n	80025f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <chk_lock+0xb4>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	3308      	adds	r3, #8
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d102      	bne.n	80025f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80025ec:	e007      	b.n	80025fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d9d2      	bls.n	80025a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d109      	bne.n	8002618 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <chk_lock+0x80>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d101      	bne.n	8002614 <chk_lock+0x84>
 8002610:	2300      	movs	r3, #0
 8002612:	e010      	b.n	8002636 <chk_lock+0xa6>
 8002614:	2312      	movs	r3, #18
 8002616:	e00e      	b.n	8002636 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d108      	bne.n	8002630 <chk_lock+0xa0>
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <chk_lock+0xb4>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	330c      	adds	r3, #12
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262e:	d101      	bne.n	8002634 <chk_lock+0xa4>
 8002630:	2310      	movs	r3, #16
 8002632:	e000      	b.n	8002636 <chk_lock+0xa6>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000108 	.word	0x20000108

08002648 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e002      	b.n	800265a <enq_lock+0x12>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3301      	adds	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d806      	bhi.n	800266e <enq_lock+0x26>
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <enq_lock+0x40>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f2      	bne.n	8002654 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000108 	.word	0x20000108

0800268c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e01f      	b.n	80026dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800269c:	4a41      	ldr	r2, [pc, #260]	; (80027a4 <inc_lock+0x118>)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4413      	add	r3, r2
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d113      	bne.n	80026d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <inc_lock+0x118>)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80026be:	429a      	cmp	r2, r3
 80026c0:	d109      	bne.n	80026d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80026c2:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <inc_lock+0x118>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	3308      	adds	r3, #8
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d006      	beq.n	80026e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d9dc      	bls.n	800269c <inc_lock+0x10>
 80026e2:	e000      	b.n	80026e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80026e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d132      	bne.n	8002752 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e002      	b.n	80026f8 <inc_lock+0x6c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d806      	bhi.n	800270c <inc_lock+0x80>
 80026fe:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <inc_lock+0x118>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f2      	bne.n	80026f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d101      	bne.n	8002716 <inc_lock+0x8a>
 8002712:	2300      	movs	r3, #0
 8002714:	e040      	b.n	8002798 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <inc_lock+0x118>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	491e      	ldr	r1, [pc, #120]	; (80027a4 <inc_lock+0x118>)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	440b      	add	r3, r1
 8002730:	3304      	adds	r3, #4
 8002732:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	491a      	ldr	r1, [pc, #104]	; (80027a4 <inc_lock+0x118>)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	440b      	add	r3, r1
 8002740:	3308      	adds	r3, #8
 8002742:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <inc_lock+0x118>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	330c      	adds	r3, #12
 800274e:	2200      	movs	r2, #0
 8002750:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <inc_lock+0xe0>
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <inc_lock+0x118>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	330c      	adds	r3, #12
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <inc_lock+0xe0>
 8002768:	2300      	movs	r3, #0
 800276a:	e015      	b.n	8002798 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <inc_lock+0xf8>
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <inc_lock+0x118>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	330c      	adds	r3, #12
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	e001      	b.n	8002788 <inc_lock+0xfc>
 8002784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002788:	4906      	ldr	r1, [pc, #24]	; (80027a4 <inc_lock+0x118>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	440b      	add	r3, r1
 8002790:	330c      	adds	r3, #12
 8002792:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3301      	adds	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000108 	.word	0x20000108

080027a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e010      	b.n	80027d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <clear_lock+0x44>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d105      	bne.n	80027d2 <clear_lock+0x2a>
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <clear_lock+0x44>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d9eb      	bls.n	80027b6 <clear_lock+0xe>
	}
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	20000108 	.word	0x20000108

080027f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	78db      	ldrb	r3, [r3, #3]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d034      	beq.n	800286e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7858      	ldrb	r0, [r3, #1]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002814:	2301      	movs	r3, #1
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f7ff fd9a 	bl	8002350 <disk_write>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e022      	b.n	800286e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	429a      	cmp	r2, r3
 800283c:	d217      	bcs.n	800286e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e010      	b.n	8002868 <sync_window+0x78>
					wsect += fs->fsize;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7858      	ldrb	r0, [r3, #1]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800285a:	2301      	movs	r3, #1
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	f7ff fd77 	bl	8002350 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3b01      	subs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d8eb      	bhi.n	8002846 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d01b      	beq.n	80028c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffad 	bl	80027f0 <sync_window>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7858      	ldrb	r0, [r3, #1]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80028aa:	2301      	movs	r3, #1
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	f7ff fd2f 	bl	8002310 <disk_read>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3b02      	subs	r3, #2
 80028e0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	3b02      	subs	r3, #2
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d301      	bcc.n	80028f2 <clust2sect+0x20>
 80028ee:	2300      	movs	r3, #0
 80028f0:	e008      	b.n	8002904 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	895b      	ldrh	r3, [r3, #10]
 80028f6:	461a      	mov	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	fb03 f202 	mul.w	r2, r3, r2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	4413      	add	r3, r2
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d904      	bls.n	8002930 <get_fat+0x20>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002930:	2301      	movs	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e08f      	b.n	8002a56 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d062      	beq.n	8002a0a <get_fat+0xfa>
 8002944:	2b03      	cmp	r3, #3
 8002946:	dc7c      	bgt.n	8002a42 <get_fat+0x132>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <get_fat+0x42>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d042      	beq.n	80029d6 <get_fat+0xc6>
 8002950:	e077      	b.n	8002a42 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	4413      	add	r3, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f7ff ff83 	bl	8002878 <move_window>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d167      	bne.n	8002a48 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60fa      	str	r2, [r7, #12]
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	4413      	add	r3, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6938      	ldr	r0, [r7, #16]
 800299a:	f7ff ff6d 	bl	8002878 <move_window>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d153      	bne.n	8002a4c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <get_fat+0xbc>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	e002      	b.n	80029d2 <get_fat+0xc2>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	617b      	str	r3, [r7, #20]
			break;
 80029d4:	e03f      	b.n	8002a56 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	4413      	add	r3, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	6938      	ldr	r0, [r7, #16]
 80029e4:	f7ff ff48 	bl	8002878 <move_window>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d130      	bne.n	8002a50 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80029fc:	4413      	add	r3, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fcc6 	bl	8002390 <ld_word>
 8002a04:	4603      	mov	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]
			break;
 8002a08:	e025      	b.n	8002a56 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	09db      	lsrs	r3, r3, #7
 8002a12:	4413      	add	r3, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	6938      	ldr	r0, [r7, #16]
 8002a18:	f7ff ff2e 	bl	8002878 <move_window>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002a30:	4413      	add	r3, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fcc4 	bl	80023c0 <ld_dword>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a3e:	617b      	str	r3, [r7, #20]
			break;
 8002a40:	e009      	b.n	8002a56 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e006      	b.n	8002a56 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a48:	bf00      	nop
 8002a4a:	e004      	b.n	8002a56 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a4c:	bf00      	nop
 8002a4e:	e002      	b.n	8002a56 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a54:	bf00      	nop
		}
	}

	return val;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	f240 80d9 	bls.w	8002c2a <put_fat+0x1ca>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	f080 80d3 	bcs.w	8002c2a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f000 8096 	beq.w	8002bba <put_fat+0x15a>
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	f300 80cb 	bgt.w	8002c2a <put_fat+0x1ca>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d002      	beq.n	8002a9e <put_fat+0x3e>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d06e      	beq.n	8002b7a <put_fat+0x11a>
 8002a9c:	e0c5      	b.n	8002c2a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0a5b      	lsrs	r3, r3, #9
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff fedd 	bl	8002878 <move_window>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 80a9 	bne.w	8002c1c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	61b9      	str	r1, [r7, #24]
 8002ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ada:	4413      	add	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <put_fat+0xa4>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e001      	b.n	8002b08 <put_fat+0xa8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	0a5b      	lsrs	r3, r3, #9
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff feaa 	bl	8002878 <move_window>
 8002b24:	4603      	mov	r3, r0
 8002b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b28:	7ffb      	ldrb	r3, [r7, #31]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d178      	bne.n	8002c20 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <put_fat+0xf0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e00e      	b.n	8002b6e <put_fat+0x10e>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f023 030f 	bic.w	r3, r3, #15
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	70da      	strb	r2, [r3, #3]
			break;
 8002b78:	e057      	b.n	8002c2a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	4413      	add	r3, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fe76 	bl	8002878 <move_window>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d146      	bne.n	8002c24 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002ba4:	4413      	add	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fc2a 	bl	8002406 <st_word>
			fs->wflag = 1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	70da      	strb	r2, [r3, #3]
			break;
 8002bb8:	e037      	b.n	8002c2a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	09db      	lsrs	r3, r3, #7
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fe56 	bl	8002878 <move_window>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d128      	bne.n	8002c28 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002bea:	4413      	add	r3, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fbe7 	bl	80023c0 <ld_dword>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bf8:	4323      	orrs	r3, r4
 8002bfa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c0a:	4413      	add	r3, r2
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fc14 	bl	800243c <st_dword>
			fs->wflag = 1;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	70da      	strb	r2, [r3, #3]
			break;
 8002c1a:	e006      	b.n	8002c2a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8002c1c:	bf00      	nop
 8002c1e:	e004      	b.n	8002c2a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8002c28:	bf00      	nop
		}
	}
	return res;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3724      	adds	r7, #36	; 0x24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d904      	bls.n	8002c5a <remove_chain+0x26>
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d301      	bcc.n	8002c5e <remove_chain+0x2a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e04b      	b.n	8002cf6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	69b8      	ldr	r0, [r7, #24]
 8002c6c:	f7ff fef8 	bl	8002a60 <put_fat>
 8002c70:	4603      	mov	r3, r0
 8002c72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <remove_chain+0x4a>
 8002c7a:	7ffb      	ldrb	r3, [r7, #31]
 8002c7c:	e03b      	b.n	8002cf6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff fe45 	bl	8002910 <get_fat>
 8002c86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d031      	beq.n	8002cf2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <remove_chain+0x64>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e02e      	b.n	8002cf6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d101      	bne.n	8002ca4 <remove_chain+0x70>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e028      	b.n	8002cf6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	69b8      	ldr	r0, [r7, #24]
 8002caa:	f7ff fed9 	bl	8002a60 <put_fat>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <remove_chain+0x88>
 8002cb8:	7ffb      	ldrb	r3, [r7, #31]
 8002cba:	e01c      	b.n	8002cf6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	3b02      	subs	r3, #2
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20b      	bcs.n	8002ce2 <remove_chain+0xae>
			fs->free_clst++;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	791b      	ldrb	r3, [r3, #4]
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3c6      	bcc.n	8002c7e <remove_chain+0x4a>
 8002cf0:	e000      	b.n	8002cf4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002cf2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b088      	sub	sp, #32
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10d      	bne.n	8002d30 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <create_chain+0x2c>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d31b      	bcc.n	8002d62 <create_chain+0x64>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e018      	b.n	8002d62 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fdec 	bl	8002910 <get_fat>
 8002d38:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d801      	bhi.n	8002d44 <create_chain+0x46>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e070      	b.n	8002e26 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d101      	bne.n	8002d50 <create_chain+0x52>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	e06a      	b.n	8002e26 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d201      	bcs.n	8002d5e <create_chain+0x60>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	e063      	b.n	8002e26 <create_chain+0x128>
		scl = clst;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d307      	bcc.n	8002d86 <create_chain+0x88>
				ncl = 2;
 8002d76:	2302      	movs	r3, #2
 8002d78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d901      	bls.n	8002d86 <create_chain+0x88>
 8002d82:	2300      	movs	r3, #0
 8002d84:	e04f      	b.n	8002e26 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002d86:	69f9      	ldr	r1, [r7, #28]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fdc1 	bl	8002910 <get_fat>
 8002d8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d003      	beq.n	8002da4 <create_chain+0xa6>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d101      	bne.n	8002da8 <create_chain+0xaa>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	e03e      	b.n	8002e26 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1da      	bne.n	8002d66 <create_chain+0x68>
 8002db0:	2300      	movs	r3, #0
 8002db2:	e038      	b.n	8002e26 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002db4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	69f9      	ldr	r1, [r7, #28]
 8002dbc:	6938      	ldr	r0, [r7, #16]
 8002dbe:	f7ff fe4f 	bl	8002a60 <put_fat>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <create_chain+0xe2>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	6938      	ldr	r0, [r7, #16]
 8002dd8:	f7ff fe42 	bl	8002a60 <put_fat>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <create_chain+0x116>
		fs->last_clst = ncl;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	3b02      	subs	r3, #2
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d804      	bhi.n	8002e04 <create_chain+0x106>
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	1e5a      	subs	r2, r3, #1
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	711a      	strb	r2, [r3, #4]
 8002e12:	e007      	b.n	8002e24 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <create_chain+0x122>
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e000      	b.n	8002e22 <create_chain+0x124>
 8002e20:	2301      	movs	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002e24:	69fb      	ldr	r3, [r7, #28]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	3304      	adds	r3, #4
 8002e44:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	8952      	ldrh	r2, [r2, #10]
 8002e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1d1a      	adds	r2, r3, #4
 8002e58:	613a      	str	r2, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <clmt_clust+0x3a>
 8002e64:	2300      	movs	r3, #0
 8002e66:	e010      	b.n	8002e8a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d307      	bcc.n	8002e80 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e7e:	e7e9      	b.n	8002e54 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002e80:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4413      	add	r3, r2
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eac:	d204      	bcs.n	8002eb8 <dir_sdi+0x22>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <dir_sdi+0x26>
		return FR_INT_ERR;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e063      	b.n	8002f84 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <dir_sdi+0x46>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d902      	bls.n	8002edc <dir_sdi+0x46>
		clst = fs->dirbase;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	8912      	ldrh	r2, [r2, #8]
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d301      	bcc.n	8002ef2 <dir_sdi+0x5c>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e048      	b.n	8002f84 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	61da      	str	r2, [r3, #28]
 8002efa:	e029      	b.n	8002f50 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	895b      	ldrh	r3, [r3, #10]
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f04:	e019      	b.n	8002f3a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd00 	bl	8002910 <get_fat>
 8002f10:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d101      	bne.n	8002f1e <dir_sdi+0x88>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e032      	b.n	8002f84 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d904      	bls.n	8002f2e <dir_sdi+0x98>
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d301      	bcc.n	8002f32 <dir_sdi+0x9c>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e028      	b.n	8002f84 <dir_sdi+0xee>
			ofs -= csz;
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d2e1      	bcs.n	8002f06 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	6938      	ldr	r0, [r7, #16]
 8002f46:	f7ff fcc4 	bl	80028d2 <clust2sect>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <dir_sdi+0xcc>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e010      	b.n	8002f84 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	0a5b      	lsrs	r3, r3, #9
 8002f6a:	441a      	add	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	3320      	adds	r3, #32
 8002fa2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <dir_next+0x28>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb2:	d301      	bcc.n	8002fb8 <dir_next+0x2c>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e0aa      	b.n	800310e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 8098 	bne.w	80030f4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	8912      	ldrh	r2, [r2, #8]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f0c0 8088 	bcc.w	80030f4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
 8002fea:	2304      	movs	r3, #4
 8002fec:	e08f      	b.n	800310e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0a5b      	lsrs	r3, r3, #9
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	8952      	ldrh	r2, [r2, #10]
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d17a      	bne.n	80030f4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7ff fc82 	bl	8002910 <get_fat>
 800300c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d801      	bhi.n	8003018 <dir_next+0x8c>
 8003014:	2302      	movs	r3, #2
 8003016:	e07a      	b.n	800310e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d101      	bne.n	8003024 <dir_next+0x98>
 8003020:	2301      	movs	r3, #1
 8003022:	e074      	b.n	800310e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d358      	bcc.n	80030e0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
 800303a:	2304      	movs	r3, #4
 800303c:	e067      	b.n	800310e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f7ff fe59 	bl	8002cfe <create_chain>
 800304c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <dir_next+0xcc>
 8003054:	2307      	movs	r3, #7
 8003056:	e05a      	b.n	800310e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <dir_next+0xd6>
 800305e:	2302      	movs	r3, #2
 8003060:	e055      	b.n	800310e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d101      	bne.n	800306e <dir_next+0xe2>
 800306a:	2301      	movs	r3, #1
 800306c:	e04f      	b.n	800310e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fbbe 	bl	80027f0 <sync_window>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <dir_next+0xf2>
 800307a:	2301      	movs	r3, #1
 800307c:	e047      	b.n	800310e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3334      	adds	r3, #52	; 0x34
 8003082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fa24 	bl	80024d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff fc1c 	bl	80028d2 <clust2sect>
 800309a:	4602      	mov	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e012      	b.n	80030c8 <dir_next+0x13c>
						fs->wflag = 1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fba1 	bl	80027f0 <sync_window>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <dir_next+0x12c>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e02a      	b.n	800310e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3301      	adds	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	895b      	ldrh	r3, [r3, #10]
 80030cc:	461a      	mov	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d3e6      	bcc.n	80030a2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fbf2 	bl	80028d2 <clust2sect>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	441a      	add	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff feb4 	bl	8002e96 <dir_sdi>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12b      	bne.n	8003190 <dir_alloc+0x7a>
		n = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4619      	mov	r1, r3
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff fb98 	bl	8002878 <move_window>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11d      	bne.n	800318e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2be5      	cmp	r3, #229	; 0xe5
 800315a:	d004      	beq.n	8003166 <dir_alloc+0x50>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	3301      	adds	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d102      	bne.n	800317a <dir_alloc+0x64>
 8003174:	e00c      	b.n	8003190 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800317a:	2101      	movs	r1, #1
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff05 	bl	8002f8c <dir_next>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0d7      	beq.n	800313c <dir_alloc+0x26>
 800318c:	e000      	b.n	8003190 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800318e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d101      	bne.n	800319a <dir_alloc+0x84>
 8003196:	2307      	movs	r3, #7
 8003198:	75fb      	strb	r3, [r7, #23]
	return res;
 800319a:	7dfb      	ldrb	r3, [r7, #23]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	331a      	adds	r3, #26
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f8ec 	bl	8002390 <ld_word>
 80031b8:	4603      	mov	r3, r0
 80031ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d109      	bne.n	80031d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f8e1 	bl	8002390 <ld_word>
 80031ce:	4603      	mov	r3, r0
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	331a      	adds	r3, #26
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	b292      	uxth	r2, r2
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f904 	bl	8002406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d109      	bne.n	800321a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f103 0214 	add.w	r2, r3, #20
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b29b      	uxth	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7ff f8f6 	bl	8002406 <st_word>
	}
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	331a      	adds	r3, #26
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f8ac 	bl	8002390 <ld_word>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <cmp_lfn+0x1e>
 800323e:	2300      	movs	r3, #0
 8003240:	e059      	b.n	80032f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003258:	2301      	movs	r3, #1
 800325a:	81fb      	strh	r3, [r7, #14]
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e033      	b.n	80032ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003262:	4a27      	ldr	r2, [pc, #156]	; (8003300 <cmp_lfn+0xdc>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f88d 	bl	8002390 <ld_word>
 8003276:	4603      	mov	r3, r0
 8003278:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2bfe      	cmp	r3, #254	; 0xfe
 8003284:	d812      	bhi.n	80032ac <cmp_lfn+0x88>
 8003286:	89bb      	ldrh	r3, [r7, #12]
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fe39 	bl	8004f00 <ff_wtoupper>
 800328e:	4603      	mov	r3, r0
 8003290:	461c      	mov	r4, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	617a      	str	r2, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fe2d 	bl	8004f00 <ff_wtoupper>
 80032a6:	4603      	mov	r3, r0
 80032a8:	429c      	cmp	r4, r3
 80032aa:	d001      	beq.n	80032b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80032ac:	2300      	movs	r3, #0
 80032ae:	e022      	b.n	80032f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80032b0:	89bb      	ldrh	r3, [r7, #12]
 80032b2:	81fb      	strh	r3, [r7, #14]
 80032b4:	e006      	b.n	80032c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80032b6:	89bb      	ldrh	r3, [r7, #12]
 80032b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032bc:	4293      	cmp	r3, r2
 80032be:	d001      	beq.n	80032c4 <cmp_lfn+0xa0>
 80032c0:	2300      	movs	r3, #0
 80032c2:	e018      	b.n	80032f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	3301      	adds	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d9c8      	bls.n	8003262 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <cmp_lfn+0xd0>
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <cmp_lfn+0xd0>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <cmp_lfn+0xd0>
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	bf00      	nop
 8003300:	08005a78 	.word	0x08005a78

08003304 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	4613      	mov	r3, r2
 8003318:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	330d      	adds	r3, #13
 800331e:	79ba      	ldrb	r2, [r7, #6]
 8003320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	330b      	adds	r3, #11
 8003326:	220f      	movs	r2, #15
 8003328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	330c      	adds	r3, #12
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	331a      	adds	r3, #26
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f864 	bl	8002406 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	82fb      	strh	r3, [r7, #22]
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <put_lfn+0x6c>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	61fa      	str	r2, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <put_lfn+0xcc>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	8afa      	ldrh	r2, [r7, #22]
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f83f 	bl	8002406 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003388:	8afb      	ldrh	r3, [r7, #22]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <put_lfn+0x90>
 800338e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003392:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3301      	adds	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d9da      	bls.n	8003356 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80033a0:	8afb      	ldrh	r3, [r7, #22]
 80033a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d006      	beq.n	80033b8 <put_lfn+0xb4>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <put_lfn+0xbc>
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	79fa      	ldrb	r2, [r7, #7]
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08005a78 	.word	0x08005a78

080033d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80033e2:	220b      	movs	r2, #11
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff f854 	bl	8002494 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d92b      	bls.n	800344a <gen_numname+0x76>
		sr = seq;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80033f6:	e022      	b.n	800343e <gen_numname+0x6a>
			wc = *lfn++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	e017      	b.n	8003438 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005a      	lsls	r2, r3, #1
 800340c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <gen_numname+0x5e>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800342c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003430:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	3301      	adds	r3, #1
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2b0f      	cmp	r3, #15
 800343c:	d9e4      	bls.n	8003408 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1d8      	bne.n	80033f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800344a:	2307      	movs	r3, #7
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3330      	adds	r3, #48	; 0x30
 800345a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800345e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003462:	2b39      	cmp	r3, #57	; 0x39
 8003464:	d904      	bls.n	8003470 <gen_numname+0x9c>
 8003466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800346a:	3307      	adds	r3, #7
 800346c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	62ba      	str	r2, [r7, #40]	; 0x28
 8003476:	3330      	adds	r3, #48	; 0x30
 8003478:	443b      	add	r3, r7
 800347a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800347e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1df      	bne.n	800344e <gen_numname+0x7a>
	ns[i] = '~';
 800348e:	f107 0214 	add.w	r2, r7, #20
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	4413      	add	r3, r2
 8003496:	227e      	movs	r2, #126	; 0x7e
 8003498:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e002      	b.n	80034a6 <gen_numname+0xd2>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3301      	adds	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d205      	bcs.n	80034ba <gen_numname+0xe6>
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	4413      	add	r3, r2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d1f2      	bne.n	80034a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	2b07      	cmp	r3, #7
 80034be:	d807      	bhi.n	80034d0 <gen_numname+0xfc>
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	62ba      	str	r2, [r7, #40]	; 0x28
 80034c6:	3330      	adds	r3, #48	; 0x30
 80034c8:	443b      	add	r3, r7
 80034ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80034ce:	e000      	b.n	80034d2 <gen_numname+0xfe>
 80034d0:	2120      	movs	r1, #32
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	627a      	str	r2, [r7, #36]	; 0x24
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	2b07      	cmp	r3, #7
 80034e4:	d9e9      	bls.n	80034ba <gen_numname+0xe6>
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	3730      	adds	r7, #48	; 0x30
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80034fc:	230b      	movs	r3, #11
 80034fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	0852      	lsrs	r2, r2, #1
 8003506:	01db      	lsls	r3, r3, #7
 8003508:	4313      	orrs	r3, r2
 800350a:	b2da      	uxtb	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	6079      	str	r1, [r7, #4]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4413      	add	r3, r2
 8003516:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ed      	bne.n	8003500 <sum_sfn+0x10>
	return sum;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fca7 	bl	8002e96 <dir_sdi>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <dir_find+0x24>
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	e0a9      	b.n	80036aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003556:	23ff      	movs	r3, #255	; 0xff
 8003558:	753b      	strb	r3, [r7, #20]
 800355a:	7d3b      	ldrb	r3, [r7, #20]
 800355c:	757b      	strb	r3, [r7, #21]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f04f 32ff 	mov.w	r2, #4294967295
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4619      	mov	r1, r3
 800356c:	6938      	ldr	r0, [r7, #16]
 800356e:	f7ff f983 	bl	8002878 <move_window>
 8003572:	4603      	mov	r3, r0
 8003574:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 8090 	bne.w	800369e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003586:	7dbb      	ldrb	r3, [r7, #22]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <dir_find+0x60>
 800358c:	2304      	movs	r3, #4
 800358e:	75fb      	strb	r3, [r7, #23]
 8003590:	e08a      	b.n	80036a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	330b      	adds	r3, #11
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80035a6:	7dbb      	ldrb	r3, [r7, #22]
 80035a8:	2be5      	cmp	r3, #229	; 0xe5
 80035aa:	d007      	beq.n	80035bc <dir_find+0x8a>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <dir_find+0x98>
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d006      	beq.n	80035ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80035bc:	23ff      	movs	r3, #255	; 0xff
 80035be:	757b      	strb	r3, [r7, #21]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
 80035c8:	e05e      	b.n	8003688 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d136      	bne.n	800363e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d154      	bne.n	8003688 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80035de:	7dbb      	ldrb	r3, [r7, #22]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	7b5b      	ldrb	r3, [r3, #13]
 80035ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80035f0:	7dbb      	ldrb	r3, [r7, #22]
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	75bb      	strb	r3, [r7, #22]
 80035f8:	7dbb      	ldrb	r3, [r7, #22]
 80035fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003604:	7dba      	ldrb	r2, [r7, #22]
 8003606:	7d7b      	ldrb	r3, [r7, #21]
 8003608:	429a      	cmp	r2, r3
 800360a:	d115      	bne.n	8003638 <dir_find+0x106>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	330d      	adds	r3, #13
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	7d3a      	ldrb	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d10e      	bne.n	8003638 <dir_find+0x106>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff fdfd 	bl	8003224 <cmp_lfn>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <dir_find+0x106>
 8003630:	7d7b      	ldrb	r3, [r7, #21]
 8003632:	3b01      	subs	r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e000      	b.n	800363a <dir_find+0x108>
 8003638:	23ff      	movs	r3, #255	; 0xff
 800363a:	757b      	strb	r3, [r7, #21]
 800363c:	e024      	b.n	8003688 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800363e:	7d7b      	ldrb	r3, [r7, #21]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <dir_find+0x126>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff51 	bl	80034f0 <sum_sfn>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	7d3b      	ldrb	r3, [r7, #20]
 8003654:	4293      	cmp	r3, r2
 8003656:	d024      	beq.n	80036a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <dir_find+0x14a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a18      	ldr	r0, [r3, #32]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3324      	adds	r3, #36	; 0x24
 800366e:	220b      	movs	r2, #11
 8003670:	4619      	mov	r1, r3
 8003672:	f7fe ff4b 	bl	800250c <mem_cmp>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d014      	beq.n	80036a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800367c:	23ff      	movs	r3, #255	; 0xff
 800367e:	757b      	strb	r3, [r7, #21]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fc7e 	bl	8002f8c <dir_next>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f43f af65 	beq.w	8003566 <dir_find+0x34>
 800369c:	e004      	b.n	80036a8 <dir_find+0x176>
		if (res != FR_OK) break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80036a6:	bf00      	nop

	return res;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80036c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <dir_register+0x20>
 80036d0:	2306      	movs	r3, #6
 80036d2:	e0e0      	b.n	8003896 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	e002      	b.n	80036e0 <dir_register+0x2c>
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	3301      	adds	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f4      	bne.n	80036da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	220c      	movs	r2, #12
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fec9 	bl	8002494 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d032      	beq.n	8003772 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003714:	2301      	movs	r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
 8003718:	e016      	b.n	8003748 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	f107 010c 	add.w	r1, r7, #12
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	f7ff fe53 	bl	80033d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff feff 	bl	8003532 <dir_find>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800373a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	3301      	adds	r3, #1
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	2b63      	cmp	r3, #99	; 0x63
 800374c:	d9e5      	bls.n	800371a <dir_register+0x66>
 800374e:	e000      	b.n	8003752 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003750:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d101      	bne.n	800375c <dir_register+0xa8>
 8003758:	2307      	movs	r3, #7
 800375a:	e09c      	b.n	8003896 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800375c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003760:	2b04      	cmp	r3, #4
 8003762:	d002      	beq.n	800376a <dir_register+0xb6>
 8003764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003768:	e095      	b.n	8003896 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800376a:	7dfa      	ldrb	r2, [r7, #23]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <dir_register+0xd8>
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	330c      	adds	r3, #12
 8003780:	4a47      	ldr	r2, [pc, #284]	; (80038a0 <dir_register+0x1ec>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3301      	adds	r3, #1
 800378a:	e000      	b.n	800378e <dir_register+0xda>
 800378c:	2301      	movs	r3, #1
 800378e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fcbf 	bl	8003116 <dir_alloc>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800379e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d148      	bne.n	8003838 <dir_register+0x184>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d042      	beq.n	8003838 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fb69 	bl	8002e96 <dir_sdi>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80037ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d132      	bne.n	8003838 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3324      	adds	r3, #36	; 0x24
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fe8a 	bl	80034f0 <sum_sfn>
 80037dc:	4603      	mov	r3, r0
 80037de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4619      	mov	r1, r3
 80037e6:	69f8      	ldr	r0, [r7, #28]
 80037e8:	f7ff f846 	bl	8002878 <move_window>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80037f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	68d8      	ldr	r0, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a19      	ldr	r1, [r3, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	7efb      	ldrb	r3, [r7, #27]
 8003808:	f7ff fd7c 	bl	8003304 <put_lfn>
				fs->wflag = 1;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2201      	movs	r2, #1
 8003810:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fbb9 	bl	8002f8c <dir_next>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <dir_register+0x184>
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	3b01      	subs	r3, #1
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1d5      	bne.n	80037e0 <dir_register+0x12c>
 8003834:	e000      	b.n	8003838 <dir_register+0x184>
				if (res != FR_OK) break;
 8003836:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800383c:	2b00      	cmp	r3, #0
 800383e:	d128      	bne.n	8003892 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4619      	mov	r1, r3
 8003846:	69f8      	ldr	r0, [r7, #28]
 8003848:	f7ff f816 	bl	8002878 <move_window>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11b      	bne.n	8003892 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2220      	movs	r2, #32
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fe37 	bl	80024d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a18      	ldr	r0, [r3, #32]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3324      	adds	r3, #36	; 0x24
 8003870:	220b      	movs	r2, #11
 8003872:	4619      	mov	r1, r3
 8003874:	f7fe fe0e 	bl	8002494 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	330c      	adds	r3, #12
 8003884:	f002 0218 	and.w	r2, r2, #24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2201      	movs	r2, #1
 8003890:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003896:	4618      	mov	r0, r3
 8003898:	3730      	adds	r7, #48	; 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	4ec4ec4f 	.word	0x4ec4ec4f

080038a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	61ba      	str	r2, [r7, #24]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80038d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038d4:	2b1f      	cmp	r3, #31
 80038d6:	d940      	bls.n	800395a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80038d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038da:	2b2f      	cmp	r3, #47	; 0x2f
 80038dc:	d006      	beq.n	80038ec <create_name+0x48>
 80038de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038e0:	2b5c      	cmp	r3, #92	; 0x5c
 80038e2:	d110      	bne.n	8003906 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80038e4:	e002      	b.n	80038ec <create_name+0x48>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	3301      	adds	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b2f      	cmp	r3, #47	; 0x2f
 80038f6:	d0f6      	beq.n	80038e6 <create_name+0x42>
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b5c      	cmp	r3, #92	; 0x5c
 8003902:	d0f0      	beq.n	80038e6 <create_name+0x42>
			break;
 8003904:	e02a      	b.n	800395c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2bfe      	cmp	r3, #254	; 0xfe
 800390a:	d901      	bls.n	8003910 <create_name+0x6c>
 800390c:	2306      	movs	r3, #6
 800390e:	e17d      	b.n	8003c0c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003912:	b2db      	uxtb	r3, r3
 8003914:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f001 fab4 	bl	8004e88 <ff_convert>
 8003920:	4603      	mov	r3, r0
 8003922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <create_name+0x8a>
 800392a:	2306      	movs	r3, #6
 800392c:	e16e      	b.n	8003c0c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800392e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003930:	2b7f      	cmp	r3, #127	; 0x7f
 8003932:	d809      	bhi.n	8003948 <create_name+0xa4>
 8003934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003936:	4619      	mov	r1, r3
 8003938:	488d      	ldr	r0, [pc, #564]	; (8003b70 <create_name+0x2cc>)
 800393a:	f7fe fe0e 	bl	800255a <chk_chr>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <create_name+0xa4>
 8003944:	2306      	movs	r3, #6
 8003946:	e161      	b.n	8003c0c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	617a      	str	r2, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003956:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003958:	e7b4      	b.n	80038c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800395a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	441a      	add	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003968:	2b1f      	cmp	r3, #31
 800396a:	d801      	bhi.n	8003970 <create_name+0xcc>
 800396c:	2304      	movs	r3, #4
 800396e:	e000      	b.n	8003972 <create_name+0xce>
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003976:	e011      	b.n	800399c <create_name+0xf8>
		w = lfn[di - 1];
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800397e:	3b01      	subs	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800398a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800398c:	2b20      	cmp	r3, #32
 800398e:	d002      	beq.n	8003996 <create_name+0xf2>
 8003990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003992:	2b2e      	cmp	r3, #46	; 0x2e
 8003994:	d106      	bne.n	80039a4 <create_name+0x100>
		di--;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3b01      	subs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ea      	bne.n	8003978 <create_name+0xd4>
 80039a2:	e000      	b.n	80039a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80039a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	2200      	movs	r2, #0
 80039b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <create_name+0x118>
 80039b8:	2306      	movs	r3, #6
 80039ba:	e127      	b.n	8003c0c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	220b      	movs	r2, #11
 80039c2:	2120      	movs	r1, #32
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fd86 	bl	80024d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e002      	b.n	80039d6 <create_name+0x132>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d0f5      	beq.n	80039d0 <create_name+0x12c>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2b2e      	cmp	r3, #46	; 0x2e
 80039f0:	d0ee      	beq.n	80039d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <create_name+0x168>
 80039f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039fc:	f043 0303 	orr.w	r3, r3, #3
 8003a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003a04:	e002      	b.n	8003a0c <create_name+0x168>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <create_name+0x182>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	2b2e      	cmp	r3, #46	; 0x2e
 8003a24:	d1ef      	bne.n	8003a06 <create_name+0x162>

	i = b = 0; ni = 8;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	2308      	movs	r3, #8
 8003a32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	61ba      	str	r2, [r7, #24]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8090 	beq.w	8003b6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d006      	beq.n	8003a60 <create_name+0x1bc>
 8003a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a54:	2b2e      	cmp	r3, #46	; 0x2e
 8003a56:	d10a      	bne.n	8003a6e <create_name+0x1ca>
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d006      	beq.n	8003a6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a64:	f043 0303 	orr.w	r3, r3, #3
 8003a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a6c:	e07d      	b.n	8003b6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d203      	bcs.n	8003a7e <create_name+0x1da>
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d123      	bne.n	8003ac6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b0b      	cmp	r3, #11
 8003a82:	d106      	bne.n	8003a92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a88:	f043 0303 	orr.w	r3, r3, #3
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a90:	e075      	b.n	8003b7e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d005      	beq.n	8003aa6 <create_name+0x202>
 8003a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a9e:	f043 0303 	orr.w	r3, r3, #3
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d866      	bhi.n	8003b7c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	230b      	movs	r3, #11
 8003ab8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ac4:	e051      	b.n	8003b6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aca:	d914      	bls.n	8003af6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f9d9 	bl	8004e88 <ff_convert>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <create_name+0x246>
 8003ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ae2:	3b80      	subs	r3, #128	; 0x80
 8003ae4:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <create_name+0x2d0>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <create_name+0x268>
 8003afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	481d      	ldr	r0, [pc, #116]	; (8003b78 <create_name+0x2d4>)
 8003b02:	f7fe fd2a 	bl	800255a <chk_chr>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003b0c:	235f      	movs	r3, #95	; 0x5f
 8003b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b14:	f043 0303 	orr.w	r3, r3, #3
 8003b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b1c:	e01b      	b.n	8003b56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d909      	bls.n	8003b38 <create_name+0x294>
 8003b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b26:	2b5a      	cmp	r3, #90	; 0x5a
 8003b28:	d806      	bhi.n	8003b38 <create_name+0x294>
					b |= 2;
 8003b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b2e:	f043 0302 	orr.w	r3, r3, #2
 8003b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b36:	e00e      	b.n	8003b56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b3a:	2b60      	cmp	r3, #96	; 0x60
 8003b3c:	d90b      	bls.n	8003b56 <create_name+0x2b2>
 8003b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b40:	2b7a      	cmp	r3, #122	; 0x7a
 8003b42:	d808      	bhi.n	8003b56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b52:	3b20      	subs	r3, #32
 8003b54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	623a      	str	r2, [r7, #32]
 8003b5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b5e:	b2d1      	uxtb	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	460a      	mov	r2, r1
 8003b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003b6a:	e763      	b.n	8003a34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8003b6c:	bf00      	nop
 8003b6e:	e006      	b.n	8003b7e <create_name+0x2da>
 8003b70:	080059a0 	.word	0x080059a0
 8003b74:	080059f8 	.word	0x080059f8
 8003b78:	080059ac 	.word	0x080059ac
			if (si > di) break;			/* No extension */
 8003b7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b84:	2be5      	cmp	r3, #229	; 0xe5
 8003b86:	d103      	bne.n	8003b90 <create_name+0x2ec>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d104      	bne.n	8003ba0 <create_name+0x2fc>
 8003b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d005      	beq.n	8003bb8 <create_name+0x314>
 8003bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d105      	bne.n	8003bc4 <create_name+0x320>
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d117      	bne.n	8003c00 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <create_name+0x344>
 8003bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be0:	f043 0310 	orr.w	r3, r3, #16
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d105      	bne.n	8003c00 <create_name+0x35c>
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8003c0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3728      	adds	r7, #40	; 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c28:	e002      	b.n	8003c30 <follow_path+0x1c>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b2f      	cmp	r3, #47	; 0x2f
 8003c36:	d0f8      	beq.n	8003c2a <follow_path+0x16>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c3e:	d0f4      	beq.n	8003c2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b1f      	cmp	r3, #31
 8003c4c:	d80a      	bhi.n	8003c64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003c56:	2100      	movs	r1, #0
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff f91c 	bl	8002e96 <dir_sdi>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	75fb      	strb	r3, [r7, #23]
 8003c62:	e043      	b.n	8003cec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003c64:	463b      	mov	r3, r7
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fe1b 	bl	80038a4 <create_name>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d134      	bne.n	8003ce2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fc5a 	bl	8003532 <dir_find>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d127      	bne.n	8003ce6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d122      	bne.n	8003ce6 <follow_path+0xd2>
 8003ca0:	2305      	movs	r3, #5
 8003ca2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003ca4:	e01f      	b.n	8003ce6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11c      	bne.n	8003cea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	799b      	ldrb	r3, [r3, #6]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	75fb      	strb	r3, [r7, #23]
 8003cc0:	e014      	b.n	8003cec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	4413      	add	r3, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff fa65 	bl	80031a4 <ld_clust>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003ce0:	e7c0      	b.n	8003c64 <follow_path+0x50>
			if (res != FR_OK) break;
 8003ce2:	bf00      	nop
 8003ce4:	e002      	b.n	8003cec <follow_path+0xd8>
				break;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003cea:	bf00      	nop
			}
		}
	}

	return res;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d031      	beq.n	8003d70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e002      	b.n	8003d1a <get_ldnumber+0x24>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3301      	adds	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b1f      	cmp	r3, #31
 8003d20:	d903      	bls.n	8003d2a <get_ldnumber+0x34>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b3a      	cmp	r3, #58	; 0x3a
 8003d28:	d1f4      	bne.n	8003d14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8003d30:	d11c      	bne.n	8003d6c <get_ldnumber+0x76>
			tp = *path;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60fa      	str	r2, [r7, #12]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	3b30      	subs	r3, #48	; 0x30
 8003d42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b09      	cmp	r3, #9
 8003d48:	d80e      	bhi.n	8003d68 <get_ldnumber+0x72>
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d10a      	bne.n	8003d68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <get_ldnumber+0x72>
					vol = (int)i;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	e002      	b.n	8003d72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003d70:	693b      	ldr	r3, [r7, #16]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	70da      	strb	r2, [r3, #3]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fe fd6c 	bl	8002878 <move_window>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <check_fs+0x2a>
 8003da6:	2304      	movs	r3, #4
 8003da8:	e038      	b.n	8003e1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3334      	adds	r3, #52	; 0x34
 8003dae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe faec 	bl	8002390 <ld_word>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <check_fs+0x48>
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e029      	b.n	8003e1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dce:	2be9      	cmp	r3, #233	; 0xe9
 8003dd0:	d009      	beq.n	8003de6 <check_fs+0x66>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dd8:	2beb      	cmp	r3, #235	; 0xeb
 8003dda:	d11e      	bne.n	8003e1a <check_fs+0x9a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003de2:	2b90      	cmp	r3, #144	; 0x90
 8003de4:	d119      	bne.n	8003e1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3334      	adds	r3, #52	; 0x34
 8003dea:	3336      	adds	r3, #54	; 0x36
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fae7 	bl	80023c0 <ld_dword>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003df8:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <check_fs+0xa4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <check_fs+0x82>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e00c      	b.n	8003e1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3334      	adds	r3, #52	; 0x34
 8003e06:	3352      	adds	r3, #82	; 0x52
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fad9 	bl	80023c0 <ld_dword>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <check_fs+0xa8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <check_fs+0x9a>
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003e1a:	2302      	movs	r3, #2
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	00544146 	.word	0x00544146
 8003e28:	33544146 	.word	0x33544146

08003e2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b096      	sub	sp, #88	; 0x58
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff58 	bl	8003cf6 <get_ldnumber>
 8003e46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da01      	bge.n	8003e52 <find_volume+0x26>
 8003e4e:	230b      	movs	r3, #11
 8003e50:	e230      	b.n	80042b4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003e52:	4aa1      	ldr	r2, [pc, #644]	; (80040d8 <find_volume+0x2ac>)
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <find_volume+0x3a>
 8003e62:	230c      	movs	r3, #12
 8003e64:	e226      	b.n	80042b4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01a      	beq.n	8003eb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fa05 	bl	8002290 <disk_status>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10c      	bne.n	8003eb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <find_volume+0x82>
 8003e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003eaa:	230a      	movs	r3, #10
 8003eac:	e202      	b.n	80042b4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e200      	b.n	80042b4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe f9fd 	bl	80022c4 <disk_initialize>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1e9      	b.n	80042b4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <find_volume+0xca>
 8003ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e1de      	b.n	80042b4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003efa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003efc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003efe:	f7ff ff3f 	bl	8003d80 <check_fs>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d149      	bne.n	8003fa4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f10:	2300      	movs	r3, #0
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
 8003f14:	e01e      	b.n	8003f54 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003f24:	4413      	add	r3, r2
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <find_volume+0x114>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	3308      	adds	r3, #8
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fa42 	bl	80023c0 <ld_dword>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	e000      	b.n	8003f42 <find_volume+0x116>
 8003f40:	2200      	movs	r2, #0
 8003f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	3358      	adds	r3, #88	; 0x58
 8003f48:	443b      	add	r3, r7
 8003f4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	3301      	adds	r3, #1
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d9dd      	bls.n	8003f16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <find_volume+0x13e>
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	3b01      	subs	r3, #1
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3358      	adds	r3, #88	; 0x58
 8003f70:	443b      	add	r3, r7
 8003f72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003f76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <find_volume+0x15e>
 8003f7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f82:	f7ff fefd 	bl	8003d80 <check_fs>
 8003f86:	4603      	mov	r3, r0
 8003f88:	e000      	b.n	8003f8c <find_volume+0x160>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d905      	bls.n	8003fa4 <find_volume+0x178>
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d9e2      	bls.n	8003f6a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d101      	bne.n	8003fb0 <find_volume+0x184>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e181      	b.n	80042b4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d901      	bls.n	8003fbc <find_volume+0x190>
 8003fb8:	230d      	movs	r3, #13
 8003fba:	e17b      	b.n	80042b4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	3334      	adds	r3, #52	; 0x34
 8003fc0:	330b      	adds	r3, #11
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f9e4 	bl	8002390 <ld_word>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fce:	d001      	beq.n	8003fd4 <find_volume+0x1a8>
 8003fd0:	230d      	movs	r3, #13
 8003fd2:	e16f      	b.n	80042b4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	3334      	adds	r3, #52	; 0x34
 8003fd8:	3316      	adds	r3, #22
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f9d8 	bl	8002390 <ld_word>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <find_volume+0x1cc>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	3334      	adds	r3, #52	; 0x34
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe f9e5 	bl	80023c0 <ld_dword>
 8003ff6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	789b      	ldrb	r3, [r3, #2]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d005      	beq.n	800401c <find_volume+0x1f0>
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	789b      	ldrb	r3, [r3, #2]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d001      	beq.n	800401c <find_volume+0x1f0>
 8004018:	230d      	movs	r3, #13
 800401a:	e14b      	b.n	80042b4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401e:	789b      	ldrb	r3, [r3, #2]
 8004020:	461a      	mov	r2, r3
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004030:	b29a      	uxth	r2, r3
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	895b      	ldrh	r3, [r3, #10]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <find_volume+0x224>
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	895b      	ldrh	r3, [r3, #10]
 8004042:	461a      	mov	r2, r3
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	895b      	ldrh	r3, [r3, #10]
 8004048:	3b01      	subs	r3, #1
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <find_volume+0x228>
 8004050:	230d      	movs	r3, #13
 8004052:	e12f      	b.n	80042b4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	3334      	adds	r3, #52	; 0x34
 8004058:	3311      	adds	r3, #17
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe f998 	bl	8002390 <ld_word>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	891b      	ldrh	r3, [r3, #8]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <find_volume+0x24e>
 8004076:	230d      	movs	r3, #13
 8004078:	e11c      	b.n	80042b4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	3334      	adds	r3, #52	; 0x34
 800407e:	3313      	adds	r3, #19
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe f985 	bl	8002390 <ld_word>
 8004086:	4603      	mov	r3, r0
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <find_volume+0x272>
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	3334      	adds	r3, #52	; 0x34
 8004094:	3320      	adds	r3, #32
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe f992 	bl	80023c0 <ld_dword>
 800409c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	3334      	adds	r3, #52	; 0x34
 80040a2:	330e      	adds	r3, #14
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f973 	bl	8002390 <ld_word>
 80040aa:	4603      	mov	r3, r0
 80040ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80040ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <find_volume+0x28c>
 80040b4:	230d      	movs	r3, #13
 80040b6:	e0fd      	b.n	80042b4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80040b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	4413      	add	r3, r2
 80040be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c0:	8912      	ldrh	r2, [r2, #8]
 80040c2:	0912      	lsrs	r2, r2, #4
 80040c4:	b292      	uxth	r2, r2
 80040c6:	4413      	add	r3, r2
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d204      	bcs.n	80040dc <find_volume+0x2b0>
 80040d2:	230d      	movs	r3, #13
 80040d4:	e0ee      	b.n	80042b4 <find_volume+0x488>
 80040d6:	bf00      	nop
 80040d8:	20000100 	.word	0x20000100
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80040dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e4:	8952      	ldrh	r2, [r2, #10]
 80040e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <find_volume+0x2ca>
 80040f2:	230d      	movs	r3, #13
 80040f4:	e0de      	b.n	80042b4 <find_volume+0x488>
		fmt = FS_FAT32;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004102:	4293      	cmp	r3, r2
 8004104:	d802      	bhi.n	800410c <find_volume+0x2e0>
 8004106:	2302      	movs	r3, #2
 8004108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <find_volume+0x2f0>
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1c9a      	adds	r2, r3, #2
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004128:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800412a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	441a      	add	r2, r3
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8004134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	441a      	add	r2, r3
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800413e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004142:	2b03      	cmp	r3, #3
 8004144:	d11e      	bne.n	8004184 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	3334      	adds	r3, #52	; 0x34
 800414a:	332a      	adds	r3, #42	; 0x2a
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe f91f 	bl	8002390 <ld_word>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <find_volume+0x330>
 8004158:	230d      	movs	r3, #13
 800415a:	e0ab      	b.n	80042b4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	891b      	ldrh	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <find_volume+0x33c>
 8004164:	230d      	movs	r3, #13
 8004166:	e0a5      	b.n	80042b4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	3334      	adds	r3, #52	; 0x34
 800416c:	332c      	adds	r3, #44	; 0x2c
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe f926 	bl	80023c0 <ld_dword>
 8004174:	4602      	mov	r2, r0
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
 8004182:	e01f      	b.n	80041c4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	891b      	ldrh	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <find_volume+0x364>
 800418c:	230d      	movs	r3, #13
 800418e:	e091      	b.n	80042b4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	441a      	add	r2, r3
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800419c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d103      	bne.n	80041ac <find_volume+0x380>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	e00a      	b.n	80041c2 <find_volume+0x396>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	085a      	lsrs	r2, r3, #1
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041ce:	0a5b      	lsrs	r3, r3, #9
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d201      	bcs.n	80041d8 <find_volume+0x3ac>
 80041d4:	230d      	movs	r3, #13
 80041d6:	e06d      	b.n	80042b4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	f04f 32ff 	mov.w	r2, #4294967295
 80041de:	615a      	str	r2, [r3, #20]
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80041ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d149      	bne.n	800428a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	3334      	adds	r3, #52	; 0x34
 80041fa:	3330      	adds	r3, #48	; 0x30
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe f8c7 	bl	8002390 <ld_word>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d140      	bne.n	800428a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	3301      	adds	r3, #1
 800420c:	4619      	mov	r1, r3
 800420e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004210:	f7fe fb32 	bl	8002878 <move_window>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d137      	bne.n	800428a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2200      	movs	r2, #0
 800421e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	3334      	adds	r3, #52	; 0x34
 8004224:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe f8b1 	bl	8002390 <ld_word>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004236:	429a      	cmp	r2, r3
 8004238:	d127      	bne.n	800428a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	3334      	adds	r3, #52	; 0x34
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe f8be 	bl	80023c0 <ld_dword>
 8004244:	4603      	mov	r3, r0
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <find_volume+0x490>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d11e      	bne.n	800428a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	3334      	adds	r3, #52	; 0x34
 8004250:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe f8b3 	bl	80023c0 <ld_dword>
 800425a:	4603      	mov	r3, r0
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <find_volume+0x494>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d113      	bne.n	800428a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	3334      	adds	r3, #52	; 0x34
 8004266:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f8a8 	bl	80023c0 <ld_dword>
 8004270:	4602      	mov	r2, r0
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	3334      	adds	r3, #52	; 0x34
 800427a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe f89e 	bl	80023c0 <ld_dword>
 8004284:	4602      	mov	r2, r0
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004290:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <find_volume+0x498>)
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	3301      	adds	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <find_volume+0x498>)
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <find_volume+0x498>)
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <find_volume+0x49c>)
 80042aa:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80042ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042ae:	f7fe fa7b 	bl	80027a8 <clear_lock>
#endif
	return FR_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3758      	adds	r7, #88	; 0x58
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	41615252 	.word	0x41615252
 80042c0:	61417272 	.word	0x61417272
 80042c4:	20000104 	.word	0x20000104
 80042c8:	20000128 	.word	0x20000128

080042cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80042d6:	2309      	movs	r3, #9
 80042d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01c      	beq.n	800431a <validate+0x4e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <validate+0x4e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d013      	beq.n	800431a <validate+0x4e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	889a      	ldrh	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	88db      	ldrh	r3, [r3, #6]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d10c      	bne.n	800431a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd ffc2 	bl	8002290 <disk_status>
 800430c:	4603      	mov	r3, r0
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <validate+0x4e>
			res = FR_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <validate+0x5a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	e000      	b.n	8004328 <validate+0x5c>
 8004326:	2300      	movs	r3, #0
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	6013      	str	r3, [r2, #0]
	return res;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800434a:	f107 0310 	add.w	r3, r7, #16
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fcd1 	bl	8003cf6 <get_ldnumber>
 8004354:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da01      	bge.n	8004360 <f_mount+0x28>
 800435c:	230b      	movs	r3, #11
 800435e:	e02b      	b.n	80043b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <f_mount+0x88>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004368:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	f7fe fa19 	bl	80027a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	490d      	ldr	r1, [pc, #52]	; (80043c0 <f_mount+0x88>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <f_mount+0x66>
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <f_mount+0x6a>
 800439e:	2300      	movs	r3, #0
 80043a0:	e00a      	b.n	80043b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80043a2:	f107 010c 	add.w	r1, r7, #12
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	2200      	movs	r2, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fd3d 	bl	8003e2c <find_volume>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000100 	.word	0x20000100

080043c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b09a      	sub	sp, #104	; 0x68
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <f_open+0x18>
 80043d8:	2309      	movs	r3, #9
 80043da:	e1ad      	b.n	8004738 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	f107 0114 	add.w	r1, r7, #20
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd1c 	bl	8003e2c <find_volume>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80043fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 8191 	bne.w	8004726 <f_open+0x362>
		dj.obj.fs = fs;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	f107 0318 	add.w	r3, r7, #24
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fbff 	bl	8003c14 <follow_path>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800441c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11a      	bne.n	800445a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004428:	b25b      	sxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	da03      	bge.n	8004436 <f_open+0x72>
				res = FR_INVALID_NAME;
 800442e:	2306      	movs	r3, #6
 8004430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004434:	e011      	b.n	800445a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	f107 0318 	add.w	r3, r7, #24
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe f89e 	bl	8002590 <chk_lock>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	f003 031c 	and.w	r3, r3, #28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07f      	beq.n	8004564 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004464:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800446c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004470:	2b04      	cmp	r3, #4
 8004472:	d10e      	bne.n	8004492 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004474:	f7fe f8e8 	bl	8002648 <enq_lock>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <f_open+0xc8>
 800447e:	f107 0318 	add.w	r3, r7, #24
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f916 	bl	80036b4 <dir_register>
 8004488:	4603      	mov	r3, r0
 800448a:	e000      	b.n	800448e <f_open+0xca>
 800448c:	2312      	movs	r3, #18
 800448e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	71fb      	strb	r3, [r7, #7]
 800449a:	e010      	b.n	80044be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800449c:	7fbb      	ldrb	r3, [r7, #30]
 800449e:	f003 0311 	and.w	r3, r3, #17
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <f_open+0xea>
					res = FR_DENIED;
 80044a6:	2307      	movs	r3, #7
 80044a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80044ac:	e007      	b.n	80044be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <f_open+0xfa>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80044be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <f_open+0x1d4>
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d063      	beq.n	8004598 <f_open+0x1d4>
				dw = GET_FATTIME();
 80044d0:	f7fd fe78 	bl	80021c4 <get_fattime>
 80044d4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	330e      	adds	r3, #14
 80044da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd ffad 	bl	800243c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	3316      	adds	r3, #22
 80044e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd ffa7 	bl	800243c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	330b      	adds	r3, #11
 80044f2:	2220      	movs	r2, #32
 80044f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fe51 	bl	80031a4 <ld_clust>
 8004502:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004508:	2200      	movs	r2, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fe69 	bl	80031e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	331c      	adds	r3, #28
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd ff90 	bl	800243c <st_dword>
					fs->wflag = 1;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2201      	movs	r2, #1
 8004520:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	d037      	beq.n	8004598 <f_open+0x1d4>
						dw = fs->winsect;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800452e:	f107 0318 	add.w	r3, r7, #24
 8004532:	2200      	movs	r2, #0
 8004534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fb7c 	bl	8002c34 <remove_chain>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8004542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004546:	2b00      	cmp	r3, #0
 8004548:	d126      	bne.n	8004598 <f_open+0x1d4>
							res = move_window(fs, dw);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f992 	bl	8002878 <move_window>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800455e:	3a01      	subs	r2, #1
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e019      	b.n	8004598 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004568:	2b00      	cmp	r3, #0
 800456a:	d115      	bne.n	8004598 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800456c:	7fbb      	ldrb	r3, [r7, #30]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <f_open+0x1ba>
					res = FR_NO_FILE;
 8004576:	2304      	movs	r3, #4
 8004578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800457c:	e00c      	b.n	8004598 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <f_open+0x1d4>
 8004588:	7fbb      	ldrb	r3, [r7, #30]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <f_open+0x1d4>
						res = FR_DENIED;
 8004592:	2307      	movs	r3, #7
 8004594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800459c:	2b00      	cmp	r3, #0
 800459e:	d128      	bne.n	80045f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80045ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	f107 0318 	add.w	r3, r7, #24
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe f857 	bl	800268c <inc_lock>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <f_open+0x22e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80045f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f040 8095 	bne.w	8004726 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fdce 	bl	80031a4 <ld_clust>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	331c      	adds	r3, #28
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fed4 	bl	80023c0 <ld_dword>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	88da      	ldrh	r2, [r3, #6]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	79fa      	ldrb	r2, [r7, #7]
 8004636:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3330      	adds	r3, #48	; 0x30
 800464e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd ff3e 	bl	80024d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d060      	beq.n	8004726 <f_open+0x362>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05c      	beq.n	8004726 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	895b      	ldrh	r3, [r3, #10]
 8004678:	025b      	lsls	r3, r3, #9
 800467a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004688:	e016      	b.n	80046b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe f93e 	bl	8002910 <get_fat>
 8004694:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	2b01      	cmp	r3, #1
 800469a:	d802      	bhi.n	80046a2 <f_open+0x2de>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80046a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d102      	bne.n	80046b0 <f_open+0x2ec>
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80046b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <f_open+0x304>
 80046c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d8e0      	bhi.n	800468a <f_open+0x2c6>
				}
				fp->clust = clst;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80046ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d127      	bne.n	8004726 <f_open+0x362>
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d022      	beq.n	8004726 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f8f4 	bl	80028d2 <clust2sect>
 80046ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80046ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <f_open+0x336>
						res = FR_INT_ERR;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80046f8:	e015      	b.n	8004726 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80046fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fc:	0a5a      	lsrs	r2, r3, #9
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	7858      	ldrb	r0, [r3, #1]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	2301      	movs	r3, #1
 8004716:	f7fd fdfb 	bl	8002310 <disk_read>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <f_open+0x362>
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <f_open+0x370>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004738:	4618      	mov	r0, r3
 800473a:	3768      	adds	r7, #104	; 0x68
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08e      	sub	sp, #56	; 0x38
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f107 0214 	add.w	r2, r7, #20
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fdb3 	bl	80042cc <validate>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800476c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <f_read+0x44>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	7d5b      	ldrb	r3, [r3, #21]
 8004778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800477c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <f_read+0x4a>
 8004784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004788:	e115      	b.n	80049b6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	7d1b      	ldrb	r3, [r3, #20]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <f_read+0x5a>
 8004796:	2307      	movs	r3, #7
 8004798:	e10d      	b.n	80049b6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	f240 80fe 	bls.w	80049ac <f_read+0x26c>
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80047b4:	e0fa      	b.n	80049ac <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 80c6 	bne.w	8004950 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	0a5b      	lsrs	r3, r3, #9
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	8952      	ldrh	r2, [r2, #10]
 80047ce:	3a01      	subs	r2, #1
 80047d0:	4013      	ands	r3, r2
 80047d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12f      	bne.n	800483a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
 80047e8:	e013      	b.n	8004812 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	4619      	mov	r1, r3
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7fe fb18 	bl	8002e2e <clmt_clust>
 80047fe:	6338      	str	r0, [r7, #48]	; 0x30
 8004800:	e007      	b.n	8004812 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f7fe f880 	bl	8002910 <get_fat>
 8004810:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d804      	bhi.n	8004822 <f_read+0xe2>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2202      	movs	r2, #2
 800481c:	755a      	strb	r2, [r3, #21]
 800481e:	2302      	movs	r3, #2
 8004820:	e0c9      	b.n	80049b6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d104      	bne.n	8004834 <f_read+0xf4>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	755a      	strb	r2, [r3, #21]
 8004830:	2301      	movs	r3, #1
 8004832:	e0c0      	b.n	80049b6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004838:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe f845 	bl	80028d2 <clust2sect>
 8004848:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <f_read+0x11a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2202      	movs	r2, #2
 8004854:	755a      	strb	r2, [r3, #21]
 8004856:	2302      	movs	r3, #2
 8004858:	e0ad      	b.n	80049b6 <f_read+0x276>
			sect += csect;
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d039      	beq.n	80048e2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	4413      	add	r3, r2
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	8952      	ldrh	r2, [r2, #10]
 8004878:	4293      	cmp	r3, r2
 800487a:	d905      	bls.n	8004888 <f_read+0x148>
					cc = fs->csize - csect;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	895b      	ldrh	r3, [r3, #10]
 8004880:	461a      	mov	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	7858      	ldrb	r0, [r3, #1]
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004892:	f7fd fd3d 	bl	8002310 <disk_read>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <f_read+0x166>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	755a      	strb	r2, [r3, #21]
 80048a2:	2301      	movs	r3, #1
 80048a4:	e087      	b.n	80049b6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	7d1b      	ldrb	r3, [r3, #20]
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da14      	bge.n	80048da <f_read+0x19a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d90d      	bls.n	80048da <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	025b      	lsls	r3, r3, #9
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	18d0      	adds	r0, r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3330      	adds	r3, #48	; 0x30
 80048d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7fd fddd 	bl	8002494 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	025b      	lsls	r3, r3, #9
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80048e0:	e050      	b.n	8004984 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d02e      	beq.n	800494a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	7d1b      	ldrb	r3, [r3, #20]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da18      	bge.n	8004928 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	7858      	ldrb	r0, [r3, #1]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	2301      	movs	r3, #1
 8004906:	f7fd fd23 	bl	8002350 <disk_write>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <f_read+0x1da>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	755a      	strb	r2, [r3, #21]
 8004916:	2301      	movs	r3, #1
 8004918:	e04d      	b.n	80049b6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	7d1b      	ldrb	r3, [r3, #20]
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	7858      	ldrb	r0, [r3, #1]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004932:	2301      	movs	r3, #1
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	f7fd fceb 	bl	8002310 <disk_read>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <f_read+0x20a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	755a      	strb	r2, [r3, #21]
 8004946:	2301      	movs	r3, #1
 8004948:	e035      	b.n	80049b6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004958:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800495e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d901      	bls.n	800496a <f_read+0x22a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	4413      	add	r3, r2
 800497a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004980:	f7fd fd88 	bl	8002494 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	4413      	add	r3, r2
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	619a      	str	r2, [r3, #24]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	441a      	add	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f47f af01 	bne.w	80047b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3738      	adds	r7, #56	; 0x38
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b090      	sub	sp, #64	; 0x40
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f107 0208 	add.w	r2, r7, #8
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fc7b 	bl	80042cc <validate>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80049dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <f_lseek+0x2e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7d5b      	ldrb	r3, [r3, #21]
 80049e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80049ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <f_lseek+0x3c>
 80049f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049f8:	e1e6      	b.n	8004dc8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80d1 	beq.w	8004ba6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d15a      	bne.n	8004ac2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	627a      	str	r2, [r7, #36]	; 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03a      	beq.n	8004aa2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	3302      	adds	r3, #2
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	3301      	adds	r3, #1
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fd ff61 	bl	8002910 <get_fat>
 8004a4e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d804      	bhi.n	8004a60 <f_lseek+0xa2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	755a      	strb	r2, [r3, #21]
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e1b3      	b.n	8004dc8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d104      	bne.n	8004a72 <f_lseek+0xb4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	755a      	strb	r2, [r3, #21]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e1aa      	b.n	8004dc8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d0de      	beq.n	8004a3a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d809      	bhi.n	8004a98 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	627a      	str	r2, [r7, #36]	; 0x24
 8004a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	627a      	str	r2, [r7, #36]	; 0x24
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d3c4      	bcc.n	8004a2c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8004aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d803      	bhi.n	8004aba <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e184      	b.n	8004dc4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004aba:	2311      	movs	r3, #17
 8004abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004ac0:	e180      	b.n	8004dc4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <f_lseek+0x114>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8172 	beq.w	8004dc4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe f9a1 	bl	8002e2e <clmt_clust>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fd fee9 	bl	80028d2 <clust2sect>
 8004b00:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <f_lseek+0x154>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	755a      	strb	r2, [r3, #21]
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e15a      	b.n	8004dc8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	0a5b      	lsrs	r3, r3, #9
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	8952      	ldrh	r2, [r2, #10]
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	4013      	ands	r3, r2
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8148 	beq.w	8004dc4 <f_lseek+0x406>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f000 8142 	beq.w	8004dc4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7d1b      	ldrb	r3, [r3, #20]
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da18      	bge.n	8004b7c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	7858      	ldrb	r0, [r3, #1]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f7fd fbf9 	bl	8002350 <disk_write>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <f_lseek+0x1b0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	755a      	strb	r2, [r3, #21]
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e12c      	b.n	8004dc8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7d1b      	ldrb	r3, [r3, #20]
 8004b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	7858      	ldrb	r0, [r3, #1]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b86:	2301      	movs	r3, #1
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	f7fd fbc1 	bl	8002310 <disk_read>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <f_lseek+0x1e0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	755a      	strb	r2, [r3, #21]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e114      	b.n	8004dc8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	e10e      	b.n	8004dc4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d908      	bls.n	8004bc2 <f_lseek+0x204>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7d1b      	ldrb	r3, [r3, #20]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a7 	beq.w	8004d28 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	895b      	ldrh	r3, [r3, #10]
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	1e59      	subs	r1, r3, #1
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d30f      	bcc.n	8004c20 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	425b      	negs	r3, r3
 8004c08:	401a      	ands	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1e:	e022      	b.n	8004c66 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d119      	bne.n	8004c60 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe f864 	bl	8002cfe <create_chain>
 8004c36:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d104      	bne.n	8004c48 <f_lseek+0x28a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	755a      	strb	r2, [r3, #21]
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0bf      	b.n	8004dc8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d104      	bne.n	8004c5a <f_lseek+0x29c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	755a      	strb	r2, [r3, #21]
 8004c56:	2301      	movs	r3, #1
 8004c58:	e0b6      	b.n	8004dc8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c5e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c64:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05d      	beq.n	8004d28 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8004c6c:	e03a      	b.n	8004ce4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7d1b      	ldrb	r3, [r3, #20]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f833 	bl	8002cfe <create_chain>
 8004c98:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d108      	bne.n	8004cb2 <f_lseek+0x2f4>
							ofs = 0; break;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	e022      	b.n	8004cec <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fe30 	bl	8002910 <get_fat>
 8004cb0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d104      	bne.n	8004cc4 <f_lseek+0x306>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	755a      	strb	r2, [r3, #21]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e081      	b.n	8004dc8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d904      	bls.n	8004cd4 <f_lseek+0x316>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d304      	bcc.n	8004cde <f_lseek+0x320>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	755a      	strb	r2, [r3, #21]
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e074      	b.n	8004dc8 <f_lseek+0x40a>
					fp->clust = clst;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ce2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d8c0      	bhi.n	8004c6e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	441a      	add	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d012      	beq.n	8004d28 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd fde3 	bl	80028d2 <clust2sect>
 8004d0c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <f_lseek+0x360>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	755a      	strb	r2, [r3, #21]
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e054      	b.n	8004dc8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d24:	4413      	add	r3, r2
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d90a      	bls.n	8004d4a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7d1b      	ldrb	r3, [r3, #20]
 8004d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d036      	beq.n	8004dc4 <f_lseek+0x406>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d031      	beq.n	8004dc4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7d1b      	ldrb	r3, [r3, #20]
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da18      	bge.n	8004d9c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	7858      	ldrb	r0, [r3, #1]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f7fd fae9 	bl	8002350 <disk_write>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <f_lseek+0x3d0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	755a      	strb	r2, [r3, #21]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01c      	b.n	8004dc8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7d1b      	ldrb	r3, [r3, #20]
 8004d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	7858      	ldrb	r0, [r3, #1]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004da6:	2301      	movs	r3, #1
 8004da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004daa:	f7fd fab1 	bl	8002310 <disk_read>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <f_lseek+0x400>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	755a      	strb	r2, [r3, #21]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e004      	b.n	8004dc8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8004dc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3740      	adds	r7, #64	; 0x40
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004de6:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004de8:	7a5b      	ldrb	r3, [r3, #9]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d131      	bne.n	8004e54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004df2:	7a5b      	ldrb	r3, [r3, #9]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e00:	7a5b      	ldrb	r3, [r3, #9]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e10:	7a5b      	ldrb	r3, [r3, #9]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	79fa      	ldrb	r2, [r7, #7]
 8004e1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e20:	7a5b      	ldrb	r3, [r3, #9]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	b2d1      	uxtb	r1, r2
 8004e28:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <FATFS_LinkDriverEx+0x94>)
 8004e2a:	7251      	strb	r1, [r2, #9]
 8004e2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004e2e:	7dbb      	ldrb	r3, [r7, #22]
 8004e30:	3330      	adds	r3, #48	; 0x30
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	223a      	movs	r2, #58	; 0x3a
 8004e3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3302      	adds	r3, #2
 8004e44:	222f      	movs	r2, #47	; 0x2f
 8004e46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	3303      	adds	r3, #3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000328 	.word	0x20000328

08004e68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004e72:	2200      	movs	r2, #0
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ffaa 	bl	8004dd0 <FATFS_LinkDriverEx>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	2b7f      	cmp	r3, #127	; 0x7f
 8004e98:	d802      	bhi.n	8004ea0 <ff_convert+0x18>
		c = chr;
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	81fb      	strh	r3, [r7, #14]
 8004e9e:	e025      	b.n	8004eec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2bff      	cmp	r3, #255	; 0xff
 8004eaa:	d805      	bhi.n	8004eb8 <ff_convert+0x30>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	3b80      	subs	r3, #128	; 0x80
 8004eb0:	4a12      	ldr	r2, [pc, #72]	; (8004efc <ff_convert+0x74>)
 8004eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb6:	e000      	b.n	8004eba <ff_convert+0x32>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	81fb      	strh	r3, [r7, #14]
 8004ebc:	e016      	b.n	8004eec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	81fb      	strh	r3, [r7, #14]
 8004ec2:	e009      	b.n	8004ed8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <ff_convert+0x74>)
 8004ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d006      	beq.n	8004ee0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	81fb      	strh	r3, [r7, #14]
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	2b7f      	cmp	r3, #127	; 0x7f
 8004edc:	d9f2      	bls.n	8004ec4 <ff_convert+0x3c>
 8004ede:	e000      	b.n	8004ee2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8004ee0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	3380      	adds	r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004eec:	89fb      	ldrh	r3, [r7, #14]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	08005a88 	.word	0x08005a88

08004f00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f10:	d201      	bcs.n	8004f16 <ff_wtoupper+0x16>
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <ff_wtoupper+0x10c>)
 8004f14:	e000      	b.n	8004f18 <ff_wtoupper+0x18>
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <ff_wtoupper+0x110>)
 8004f18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	617a      	str	r2, [r7, #20]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8004f24:	8a7b      	ldrh	r3, [r7, #18]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d068      	beq.n	8004ffc <ff_wtoupper+0xfc>
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	8a7b      	ldrh	r3, [r7, #18]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d364      	bcc.n	8004ffc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	617a      	str	r2, [r7, #20]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	823b      	strh	r3, [r7, #16]
 8004f3c:	8a3b      	ldrh	r3, [r7, #16]
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	81fb      	strh	r3, [r7, #14]
 8004f42:	8a3b      	ldrh	r3, [r7, #16]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	8a79      	ldrh	r1, [r7, #18]
 8004f4c:	8a3b      	ldrh	r3, [r7, #16]
 8004f4e:	440b      	add	r3, r1
 8004f50:	429a      	cmp	r2, r3
 8004f52:	da49      	bge.n	8004fe8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8004f54:	89fb      	ldrh	r3, [r7, #14]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d84f      	bhi.n	8004ffa <ff_wtoupper+0xfa>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <ff_wtoupper+0x60>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f97 	.word	0x08004f97
 8004f68:	08004fad 	.word	0x08004fad
 8004f6c:	08004fb5 	.word	0x08004fb5
 8004f70:	08004fbd 	.word	0x08004fbd
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fdd 	.word	0x08004fdd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	8a7b      	ldrh	r3, [r7, #18]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	80fb      	strh	r3, [r7, #6]
 8004f94:	e027      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	8a7b      	ldrh	r3, [r7, #18]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	80fb      	strh	r3, [r7, #6]
 8004faa:	e01c      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	3b10      	subs	r3, #16
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	e018      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	3b20      	subs	r3, #32
 8004fb8:	80fb      	strh	r3, [r7, #6]
 8004fba:	e014      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	3b30      	subs	r3, #48	; 0x30
 8004fc0:	80fb      	strh	r3, [r7, #6]
 8004fc2:	e010      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	3b1a      	subs	r3, #26
 8004fc8:	80fb      	strh	r3, [r7, #6]
 8004fca:	e00c      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	80fb      	strh	r3, [r7, #6]
 8004fd2:	e008      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	3b50      	subs	r3, #80	; 0x50
 8004fd8:	80fb      	strh	r3, [r7, #6]
 8004fda:	e004      	b.n	8004fe6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8004fe2:	80fb      	strh	r3, [r7, #6]
 8004fe4:	bf00      	nop
			}
			break;
 8004fe6:	e008      	b.n	8004ffa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d195      	bne.n	8004f1a <ff_wtoupper+0x1a>
 8004fee:	8a3b      	ldrh	r3, [r7, #16]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8004ff8:	e78f      	b.n	8004f1a <ff_wtoupper+0x1a>
			break;
 8004ffa:	bf00      	nop
	}

	return chr;
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	08005b88 	.word	0x08005b88
 8005010:	08005d7c 	.word	0x08005d7c

08005014 <malloc>:
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <malloc+0xc>)
 8005016:	4601      	mov	r1, r0
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	f000 b823 	b.w	8005064 <_malloc_r>
 800501e:	bf00      	nop
 8005020:	20000078 	.word	0x20000078

08005024 <sbrk_aligned>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	4e0e      	ldr	r6, [pc, #56]	; (8005060 <sbrk_aligned+0x3c>)
 8005028:	460c      	mov	r4, r1
 800502a:	6831      	ldr	r1, [r6, #0]
 800502c:	4605      	mov	r5, r0
 800502e:	b911      	cbnz	r1, 8005036 <sbrk_aligned+0x12>
 8005030:	f000 fac4 	bl	80055bc <_sbrk_r>
 8005034:	6030      	str	r0, [r6, #0]
 8005036:	4621      	mov	r1, r4
 8005038:	4628      	mov	r0, r5
 800503a:	f000 fabf 	bl	80055bc <_sbrk_r>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d00a      	beq.n	8005058 <sbrk_aligned+0x34>
 8005042:	1cc4      	adds	r4, r0, #3
 8005044:	f024 0403 	bic.w	r4, r4, #3
 8005048:	42a0      	cmp	r0, r4
 800504a:	d007      	beq.n	800505c <sbrk_aligned+0x38>
 800504c:	1a21      	subs	r1, r4, r0
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fab4 	bl	80055bc <_sbrk_r>
 8005054:	3001      	adds	r0, #1
 8005056:	d101      	bne.n	800505c <sbrk_aligned+0x38>
 8005058:	f04f 34ff 	mov.w	r4, #4294967295
 800505c:	4620      	mov	r0, r4
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	20000338 	.word	0x20000338

08005064 <_malloc_r>:
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005068:	1ccd      	adds	r5, r1, #3
 800506a:	f025 0503 	bic.w	r5, r5, #3
 800506e:	3508      	adds	r5, #8
 8005070:	2d0c      	cmp	r5, #12
 8005072:	bf38      	it	cc
 8005074:	250c      	movcc	r5, #12
 8005076:	2d00      	cmp	r5, #0
 8005078:	4607      	mov	r7, r0
 800507a:	db01      	blt.n	8005080 <_malloc_r+0x1c>
 800507c:	42a9      	cmp	r1, r5
 800507e:	d905      	bls.n	800508c <_malloc_r+0x28>
 8005080:	230c      	movs	r3, #12
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	2600      	movs	r6, #0
 8005086:	4630      	mov	r0, r6
 8005088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005160 <_malloc_r+0xfc>
 8005090:	f000 f868 	bl	8005164 <__malloc_lock>
 8005094:	f8d8 3000 	ldr.w	r3, [r8]
 8005098:	461c      	mov	r4, r3
 800509a:	bb5c      	cbnz	r4, 80050f4 <_malloc_r+0x90>
 800509c:	4629      	mov	r1, r5
 800509e:	4638      	mov	r0, r7
 80050a0:	f7ff ffc0 	bl	8005024 <sbrk_aligned>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	4604      	mov	r4, r0
 80050a8:	d155      	bne.n	8005156 <_malloc_r+0xf2>
 80050aa:	f8d8 4000 	ldr.w	r4, [r8]
 80050ae:	4626      	mov	r6, r4
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d145      	bne.n	8005140 <_malloc_r+0xdc>
 80050b4:	2c00      	cmp	r4, #0
 80050b6:	d048      	beq.n	800514a <_malloc_r+0xe6>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	4631      	mov	r1, r6
 80050bc:	4638      	mov	r0, r7
 80050be:	eb04 0903 	add.w	r9, r4, r3
 80050c2:	f000 fa7b 	bl	80055bc <_sbrk_r>
 80050c6:	4581      	cmp	r9, r0
 80050c8:	d13f      	bne.n	800514a <_malloc_r+0xe6>
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	1a6d      	subs	r5, r5, r1
 80050ce:	4629      	mov	r1, r5
 80050d0:	4638      	mov	r0, r7
 80050d2:	f7ff ffa7 	bl	8005024 <sbrk_aligned>
 80050d6:	3001      	adds	r0, #1
 80050d8:	d037      	beq.n	800514a <_malloc_r+0xe6>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	442b      	add	r3, r5
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	f8d8 3000 	ldr.w	r3, [r8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d038      	beq.n	800515a <_malloc_r+0xf6>
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	42a2      	cmp	r2, r4
 80050ec:	d12b      	bne.n	8005146 <_malloc_r+0xe2>
 80050ee:	2200      	movs	r2, #0
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e00f      	b.n	8005114 <_malloc_r+0xb0>
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	1b52      	subs	r2, r2, r5
 80050f8:	d41f      	bmi.n	800513a <_malloc_r+0xd6>
 80050fa:	2a0b      	cmp	r2, #11
 80050fc:	d917      	bls.n	800512e <_malloc_r+0xca>
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	42a3      	cmp	r3, r4
 8005102:	6025      	str	r5, [r4, #0]
 8005104:	bf18      	it	ne
 8005106:	6059      	strne	r1, [r3, #4]
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	bf08      	it	eq
 800510c:	f8c8 1000 	streq.w	r1, [r8]
 8005110:	5162      	str	r2, [r4, r5]
 8005112:	604b      	str	r3, [r1, #4]
 8005114:	4638      	mov	r0, r7
 8005116:	f104 060b 	add.w	r6, r4, #11
 800511a:	f000 f829 	bl	8005170 <__malloc_unlock>
 800511e:	f026 0607 	bic.w	r6, r6, #7
 8005122:	1d23      	adds	r3, r4, #4
 8005124:	1af2      	subs	r2, r6, r3
 8005126:	d0ae      	beq.n	8005086 <_malloc_r+0x22>
 8005128:	1b9b      	subs	r3, r3, r6
 800512a:	50a3      	str	r3, [r4, r2]
 800512c:	e7ab      	b.n	8005086 <_malloc_r+0x22>
 800512e:	42a3      	cmp	r3, r4
 8005130:	6862      	ldr	r2, [r4, #4]
 8005132:	d1dd      	bne.n	80050f0 <_malloc_r+0x8c>
 8005134:	f8c8 2000 	str.w	r2, [r8]
 8005138:	e7ec      	b.n	8005114 <_malloc_r+0xb0>
 800513a:	4623      	mov	r3, r4
 800513c:	6864      	ldr	r4, [r4, #4]
 800513e:	e7ac      	b.n	800509a <_malloc_r+0x36>
 8005140:	4634      	mov	r4, r6
 8005142:	6876      	ldr	r6, [r6, #4]
 8005144:	e7b4      	b.n	80050b0 <_malloc_r+0x4c>
 8005146:	4613      	mov	r3, r2
 8005148:	e7cc      	b.n	80050e4 <_malloc_r+0x80>
 800514a:	230c      	movs	r3, #12
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4638      	mov	r0, r7
 8005150:	f000 f80e 	bl	8005170 <__malloc_unlock>
 8005154:	e797      	b.n	8005086 <_malloc_r+0x22>
 8005156:	6025      	str	r5, [r4, #0]
 8005158:	e7dc      	b.n	8005114 <_malloc_r+0xb0>
 800515a:	605b      	str	r3, [r3, #4]
 800515c:	deff      	udf	#255	; 0xff
 800515e:	bf00      	nop
 8005160:	20000334 	.word	0x20000334

08005164 <__malloc_lock>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__malloc_lock+0x8>)
 8005166:	f000 ba75 	b.w	8005654 <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	2000047c 	.word	0x2000047c

08005170 <__malloc_unlock>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__malloc_unlock+0x8>)
 8005172:	f000 ba70 	b.w	8005656 <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	2000047c 	.word	0x2000047c

0800517c <std>:
 800517c:	2300      	movs	r3, #0
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
 8005182:	e9c0 3300 	strd	r3, r3, [r0]
 8005186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800518a:	6083      	str	r3, [r0, #8]
 800518c:	8181      	strh	r1, [r0, #12]
 800518e:	6643      	str	r3, [r0, #100]	; 0x64
 8005190:	81c2      	strh	r2, [r0, #14]
 8005192:	6183      	str	r3, [r0, #24]
 8005194:	4619      	mov	r1, r3
 8005196:	2208      	movs	r2, #8
 8005198:	305c      	adds	r0, #92	; 0x5c
 800519a:	f000 f9d3 	bl	8005544 <memset>
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x38>)
 80051a0:	6263      	str	r3, [r4, #36]	; 0x24
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x3c>)
 80051a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <std+0x40>)
 80051a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <std+0x44>)
 80051ac:	6224      	str	r4, [r4, #32]
 80051ae:	6323      	str	r3, [r4, #48]	; 0x30
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	bf00      	nop
 80051b4:	08005395 	.word	0x08005395
 80051b8:	080053b7 	.word	0x080053b7
 80051bc:	080053ef 	.word	0x080053ef
 80051c0:	08005413 	.word	0x08005413

080051c4 <stdio_exit_handler>:
 80051c4:	4a02      	ldr	r2, [pc, #8]	; (80051d0 <stdio_exit_handler+0xc>)
 80051c6:	4903      	ldr	r1, [pc, #12]	; (80051d4 <stdio_exit_handler+0x10>)
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <stdio_exit_handler+0x14>)
 80051ca:	f000 b869 	b.w	80052a0 <_fwalk_sglue>
 80051ce:	bf00      	nop
 80051d0:	20000020 	.word	0x20000020
 80051d4:	080057fd 	.word	0x080057fd
 80051d8:	2000002c 	.word	0x2000002c

080051dc <cleanup_stdio>:
 80051dc:	6841      	ldr	r1, [r0, #4]
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <cleanup_stdio+0x34>)
 80051e0:	4299      	cmp	r1, r3
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	d001      	beq.n	80051ec <cleanup_stdio+0x10>
 80051e8:	f000 fb08 	bl	80057fc <_fflush_r>
 80051ec:	68a1      	ldr	r1, [r4, #8]
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <cleanup_stdio+0x38>)
 80051f0:	4299      	cmp	r1, r3
 80051f2:	d002      	beq.n	80051fa <cleanup_stdio+0x1e>
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 fb01 	bl	80057fc <_fflush_r>
 80051fa:	68e1      	ldr	r1, [r4, #12]
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <cleanup_stdio+0x3c>)
 80051fe:	4299      	cmp	r1, r3
 8005200:	d004      	beq.n	800520c <cleanup_stdio+0x30>
 8005202:	4620      	mov	r0, r4
 8005204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005208:	f000 baf8 	b.w	80057fc <_fflush_r>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	2000033c 	.word	0x2000033c
 8005214:	200003a4 	.word	0x200003a4
 8005218:	2000040c 	.word	0x2000040c

0800521c <global_stdio_init.part.0>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <global_stdio_init.part.0+0x30>)
 8005220:	4c0b      	ldr	r4, [pc, #44]	; (8005250 <global_stdio_init.part.0+0x34>)
 8005222:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <global_stdio_init.part.0+0x38>)
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4620      	mov	r0, r4
 8005228:	2200      	movs	r2, #0
 800522a:	2104      	movs	r1, #4
 800522c:	f7ff ffa6 	bl	800517c <std>
 8005230:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005234:	2201      	movs	r2, #1
 8005236:	2109      	movs	r1, #9
 8005238:	f7ff ffa0 	bl	800517c <std>
 800523c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005240:	2202      	movs	r2, #2
 8005242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005246:	2112      	movs	r1, #18
 8005248:	f7ff bf98 	b.w	800517c <std>
 800524c:	20000474 	.word	0x20000474
 8005250:	2000033c 	.word	0x2000033c
 8005254:	080051c5 	.word	0x080051c5

08005258 <__sfp_lock_acquire>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__sfp_lock_acquire+0x8>)
 800525a:	f000 b9fb 	b.w	8005654 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	2000047d 	.word	0x2000047d

08005264 <__sfp_lock_release>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__sfp_lock_release+0x8>)
 8005266:	f000 b9f6 	b.w	8005656 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	2000047d 	.word	0x2000047d

08005270 <__sinit>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4604      	mov	r4, r0
 8005274:	f7ff fff0 	bl	8005258 <__sfp_lock_acquire>
 8005278:	6a23      	ldr	r3, [r4, #32]
 800527a:	b11b      	cbz	r3, 8005284 <__sinit+0x14>
 800527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005280:	f7ff bff0 	b.w	8005264 <__sfp_lock_release>
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <__sinit+0x28>)
 8005286:	6223      	str	r3, [r4, #32]
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <__sinit+0x2c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f5      	bne.n	800527c <__sinit+0xc>
 8005290:	f7ff ffc4 	bl	800521c <global_stdio_init.part.0>
 8005294:	e7f2      	b.n	800527c <__sinit+0xc>
 8005296:	bf00      	nop
 8005298:	080051dd 	.word	0x080051dd
 800529c:	20000474 	.word	0x20000474

080052a0 <_fwalk_sglue>:
 80052a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a4:	4607      	mov	r7, r0
 80052a6:	4688      	mov	r8, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	2600      	movs	r6, #0
 80052ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052b0:	f1b9 0901 	subs.w	r9, r9, #1
 80052b4:	d505      	bpl.n	80052c2 <_fwalk_sglue+0x22>
 80052b6:	6824      	ldr	r4, [r4, #0]
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	d1f7      	bne.n	80052ac <_fwalk_sglue+0xc>
 80052bc:	4630      	mov	r0, r6
 80052be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d907      	bls.n	80052d8 <_fwalk_sglue+0x38>
 80052c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052cc:	3301      	adds	r3, #1
 80052ce:	d003      	beq.n	80052d8 <_fwalk_sglue+0x38>
 80052d0:	4629      	mov	r1, r5
 80052d2:	4638      	mov	r0, r7
 80052d4:	47c0      	blx	r8
 80052d6:	4306      	orrs	r6, r0
 80052d8:	3568      	adds	r5, #104	; 0x68
 80052da:	e7e9      	b.n	80052b0 <_fwalk_sglue+0x10>

080052dc <_puts_r>:
 80052dc:	6a03      	ldr	r3, [r0, #32]
 80052de:	b570      	push	{r4, r5, r6, lr}
 80052e0:	6884      	ldr	r4, [r0, #8]
 80052e2:	4605      	mov	r5, r0
 80052e4:	460e      	mov	r6, r1
 80052e6:	b90b      	cbnz	r3, 80052ec <_puts_r+0x10>
 80052e8:	f7ff ffc2 	bl	8005270 <__sinit>
 80052ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ee:	07db      	lsls	r3, r3, #31
 80052f0:	d405      	bmi.n	80052fe <_puts_r+0x22>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	0598      	lsls	r0, r3, #22
 80052f6:	d402      	bmi.n	80052fe <_puts_r+0x22>
 80052f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fa:	f000 f9ab 	bl	8005654 <__retarget_lock_acquire_recursive>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	0719      	lsls	r1, r3, #28
 8005302:	d513      	bpl.n	800532c <_puts_r+0x50>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	b18b      	cbz	r3, 800532c <_puts_r+0x50>
 8005308:	3e01      	subs	r6, #1
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005310:	3b01      	subs	r3, #1
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	b9e9      	cbnz	r1, 8005352 <_puts_r+0x76>
 8005316:	2b00      	cmp	r3, #0
 8005318:	da2e      	bge.n	8005378 <_puts_r+0x9c>
 800531a:	4622      	mov	r2, r4
 800531c:	210a      	movs	r1, #10
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f87b 	bl	800541a <__swbuf_r>
 8005324:	3001      	adds	r0, #1
 8005326:	d007      	beq.n	8005338 <_puts_r+0x5c>
 8005328:	250a      	movs	r5, #10
 800532a:	e007      	b.n	800533c <_puts_r+0x60>
 800532c:	4621      	mov	r1, r4
 800532e:	4628      	mov	r0, r5
 8005330:	f000 f8b0 	bl	8005494 <__swsetup_r>
 8005334:	2800      	cmp	r0, #0
 8005336:	d0e7      	beq.n	8005308 <_puts_r+0x2c>
 8005338:	f04f 35ff 	mov.w	r5, #4294967295
 800533c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800533e:	07da      	lsls	r2, r3, #31
 8005340:	d405      	bmi.n	800534e <_puts_r+0x72>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	059b      	lsls	r3, r3, #22
 8005346:	d402      	bmi.n	800534e <_puts_r+0x72>
 8005348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534a:	f000 f984 	bl	8005656 <__retarget_lock_release_recursive>
 800534e:	4628      	mov	r0, r5
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	2b00      	cmp	r3, #0
 8005354:	da04      	bge.n	8005360 <_puts_r+0x84>
 8005356:	69a2      	ldr	r2, [r4, #24]
 8005358:	429a      	cmp	r2, r3
 800535a:	dc06      	bgt.n	800536a <_puts_r+0x8e>
 800535c:	290a      	cmp	r1, #10
 800535e:	d004      	beq.n	800536a <_puts_r+0x8e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	6022      	str	r2, [r4, #0]
 8005366:	7019      	strb	r1, [r3, #0]
 8005368:	e7cf      	b.n	800530a <_puts_r+0x2e>
 800536a:	4622      	mov	r2, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f854 	bl	800541a <__swbuf_r>
 8005372:	3001      	adds	r0, #1
 8005374:	d1c9      	bne.n	800530a <_puts_r+0x2e>
 8005376:	e7df      	b.n	8005338 <_puts_r+0x5c>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	250a      	movs	r5, #10
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	6022      	str	r2, [r4, #0]
 8005380:	701d      	strb	r5, [r3, #0]
 8005382:	e7db      	b.n	800533c <_puts_r+0x60>

08005384 <puts>:
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <puts+0xc>)
 8005386:	4601      	mov	r1, r0
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	f7ff bfa7 	b.w	80052dc <_puts_r>
 800538e:	bf00      	nop
 8005390:	20000078 	.word	0x20000078

08005394 <__sread>:
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	f000 f8fc 	bl	8005598 <_read_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	bfab      	itete	ge
 80053a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053a6:	89a3      	ldrhlt	r3, [r4, #12]
 80053a8:	181b      	addge	r3, r3, r0
 80053aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053ae:	bfac      	ite	ge
 80053b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053b2:	81a3      	strhlt	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__swrite>:
 80053b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	461f      	mov	r7, r3
 80053bc:	898b      	ldrh	r3, [r1, #12]
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	4605      	mov	r5, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	4616      	mov	r6, r2
 80053c6:	d505      	bpl.n	80053d4 <__swrite+0x1e>
 80053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053cc:	2302      	movs	r3, #2
 80053ce:	2200      	movs	r2, #0
 80053d0:	f000 f8d0 	bl	8005574 <_lseek_r>
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	4632      	mov	r2, r6
 80053e2:	463b      	mov	r3, r7
 80053e4:	4628      	mov	r0, r5
 80053e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ea:	f000 b8f7 	b.w	80055dc <_write_r>

080053ee <__sseek>:
 80053ee:	b510      	push	{r4, lr}
 80053f0:	460c      	mov	r4, r1
 80053f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f6:	f000 f8bd 	bl	8005574 <_lseek_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	bf15      	itete	ne
 8005400:	6560      	strne	r0, [r4, #84]	; 0x54
 8005402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800540a:	81a3      	strheq	r3, [r4, #12]
 800540c:	bf18      	it	ne
 800540e:	81a3      	strhne	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__sclose>:
 8005412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005416:	f000 b89d 	b.w	8005554 <_close_r>

0800541a <__swbuf_r>:
 800541a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541c:	460e      	mov	r6, r1
 800541e:	4614      	mov	r4, r2
 8005420:	4605      	mov	r5, r0
 8005422:	b118      	cbz	r0, 800542c <__swbuf_r+0x12>
 8005424:	6a03      	ldr	r3, [r0, #32]
 8005426:	b90b      	cbnz	r3, 800542c <__swbuf_r+0x12>
 8005428:	f7ff ff22 	bl	8005270 <__sinit>
 800542c:	69a3      	ldr	r3, [r4, #24]
 800542e:	60a3      	str	r3, [r4, #8]
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	071a      	lsls	r2, r3, #28
 8005434:	d525      	bpl.n	8005482 <__swbuf_r+0x68>
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	b31b      	cbz	r3, 8005482 <__swbuf_r+0x68>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	1a98      	subs	r0, r3, r2
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	b2f6      	uxtb	r6, r6
 8005444:	4283      	cmp	r3, r0
 8005446:	4637      	mov	r7, r6
 8005448:	dc04      	bgt.n	8005454 <__swbuf_r+0x3a>
 800544a:	4621      	mov	r1, r4
 800544c:	4628      	mov	r0, r5
 800544e:	f000 f9d5 	bl	80057fc <_fflush_r>
 8005452:	b9e0      	cbnz	r0, 800548e <__swbuf_r+0x74>
 8005454:	68a3      	ldr	r3, [r4, #8]
 8005456:	3b01      	subs	r3, #1
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	701e      	strb	r6, [r3, #0]
 8005462:	6962      	ldr	r2, [r4, #20]
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	429a      	cmp	r2, r3
 8005468:	d004      	beq.n	8005474 <__swbuf_r+0x5a>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	07db      	lsls	r3, r3, #31
 800546e:	d506      	bpl.n	800547e <__swbuf_r+0x64>
 8005470:	2e0a      	cmp	r6, #10
 8005472:	d104      	bne.n	800547e <__swbuf_r+0x64>
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 f9c0 	bl	80057fc <_fflush_r>
 800547c:	b938      	cbnz	r0, 800548e <__swbuf_r+0x74>
 800547e:	4638      	mov	r0, r7
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f000 f805 	bl	8005494 <__swsetup_r>
 800548a:	2800      	cmp	r0, #0
 800548c:	d0d5      	beq.n	800543a <__swbuf_r+0x20>
 800548e:	f04f 37ff 	mov.w	r7, #4294967295
 8005492:	e7f4      	b.n	800547e <__swbuf_r+0x64>

08005494 <__swsetup_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <__swsetup_r+0xac>)
 8005498:	4605      	mov	r5, r0
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	460c      	mov	r4, r1
 800549e:	b118      	cbz	r0, 80054a8 <__swsetup_r+0x14>
 80054a0:	6a03      	ldr	r3, [r0, #32]
 80054a2:	b90b      	cbnz	r3, 80054a8 <__swsetup_r+0x14>
 80054a4:	f7ff fee4 	bl	8005270 <__sinit>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054ae:	0718      	lsls	r0, r3, #28
 80054b0:	d422      	bmi.n	80054f8 <__swsetup_r+0x64>
 80054b2:	06d9      	lsls	r1, r3, #27
 80054b4:	d407      	bmi.n	80054c6 <__swsetup_r+0x32>
 80054b6:	2309      	movs	r3, #9
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e034      	b.n	8005530 <__swsetup_r+0x9c>
 80054c6:	0758      	lsls	r0, r3, #29
 80054c8:	d512      	bpl.n	80054f0 <__swsetup_r+0x5c>
 80054ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054cc:	b141      	cbz	r1, 80054e0 <__swsetup_r+0x4c>
 80054ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d002      	beq.n	80054dc <__swsetup_r+0x48>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f8be 	bl	8005658 <_free_r>
 80054dc:	2300      	movs	r3, #0
 80054de:	6363      	str	r3, [r4, #52]	; 0x34
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	2300      	movs	r3, #0
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	b94b      	cbnz	r3, 8005510 <__swsetup_r+0x7c>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005506:	d003      	beq.n	8005510 <__swsetup_r+0x7c>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f9c4 	bl	8005898 <__smakebuf_r>
 8005510:	89a0      	ldrh	r0, [r4, #12]
 8005512:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005516:	f010 0301 	ands.w	r3, r0, #1
 800551a:	d00a      	beq.n	8005532 <__swsetup_r+0x9e>
 800551c:	2300      	movs	r3, #0
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	6963      	ldr	r3, [r4, #20]
 8005522:	425b      	negs	r3, r3
 8005524:	61a3      	str	r3, [r4, #24]
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	b943      	cbnz	r3, 800553c <__swsetup_r+0xa8>
 800552a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800552e:	d1c4      	bne.n	80054ba <__swsetup_r+0x26>
 8005530:	bd38      	pop	{r3, r4, r5, pc}
 8005532:	0781      	lsls	r1, r0, #30
 8005534:	bf58      	it	pl
 8005536:	6963      	ldrpl	r3, [r4, #20]
 8005538:	60a3      	str	r3, [r4, #8]
 800553a:	e7f4      	b.n	8005526 <__swsetup_r+0x92>
 800553c:	2000      	movs	r0, #0
 800553e:	e7f7      	b.n	8005530 <__swsetup_r+0x9c>
 8005540:	20000078 	.word	0x20000078

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <_close_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	; (8005570 <_close_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fb fa0b 	bl	800097a <_close>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_close_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_close_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000478 	.word	0x20000478

08005574 <_lseek_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d07      	ldr	r5, [pc, #28]	; (8005594 <_lseek_r+0x20>)
 8005578:	4604      	mov	r4, r0
 800557a:	4608      	mov	r0, r1
 800557c:	4611      	mov	r1, r2
 800557e:	2200      	movs	r2, #0
 8005580:	602a      	str	r2, [r5, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f7fb fa20 	bl	80009c8 <_lseek>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_lseek_r+0x1e>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_lseek_r+0x1e>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000478 	.word	0x20000478

08005598 <_read_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_read_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fb f9ae 	bl	8000908 <_read>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_read_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_read_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000478 	.word	0x20000478

080055bc <_sbrk_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_sbrk_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fa0c 	bl	80009e4 <_sbrk>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_sbrk_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_sbrk_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20000478 	.word	0x20000478

080055dc <_write_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	; (80055fc <_write_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb f9a9 	bl	8000942 <_write>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_write_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_write_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000478 	.word	0x20000478

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000078 	.word	0x20000078

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4d0d      	ldr	r5, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1b64      	subs	r4, r4, r5
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2600      	movs	r6, #0
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4d0b      	ldr	r5, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f000 f998 	bl	8005954 <_init>
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2600      	movs	r6, #0
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f855 3b04 	ldr.w	r3, [r5], #4
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f855 3b04 	ldr.w	r3, [r5], #4
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08005e40 	.word	0x08005e40
 8005648:	08005e40 	.word	0x08005e40
 800564c:	08005e40 	.word	0x08005e40
 8005650:	08005e44 	.word	0x08005e44

08005654 <__retarget_lock_acquire_recursive>:
 8005654:	4770      	bx	lr

08005656 <__retarget_lock_release_recursive>:
 8005656:	4770      	bx	lr

08005658 <_free_r>:
 8005658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800565a:	2900      	cmp	r1, #0
 800565c:	d044      	beq.n	80056e8 <_free_r+0x90>
 800565e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005662:	9001      	str	r0, [sp, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f1a1 0404 	sub.w	r4, r1, #4
 800566a:	bfb8      	it	lt
 800566c:	18e4      	addlt	r4, r4, r3
 800566e:	f7ff fd79 	bl	8005164 <__malloc_lock>
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <_free_r+0x94>)
 8005674:	9801      	ldr	r0, [sp, #4]
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	b933      	cbnz	r3, 8005688 <_free_r+0x30>
 800567a:	6063      	str	r3, [r4, #4]
 800567c:	6014      	str	r4, [r2, #0]
 800567e:	b003      	add	sp, #12
 8005680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005684:	f7ff bd74 	b.w	8005170 <__malloc_unlock>
 8005688:	42a3      	cmp	r3, r4
 800568a:	d908      	bls.n	800569e <_free_r+0x46>
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1961      	adds	r1, r4, r5
 8005690:	428b      	cmp	r3, r1
 8005692:	bf01      	itttt	eq
 8005694:	6819      	ldreq	r1, [r3, #0]
 8005696:	685b      	ldreq	r3, [r3, #4]
 8005698:	1949      	addeq	r1, r1, r5
 800569a:	6021      	streq	r1, [r4, #0]
 800569c:	e7ed      	b.n	800567a <_free_r+0x22>
 800569e:	461a      	mov	r2, r3
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b10b      	cbz	r3, 80056a8 <_free_r+0x50>
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d9fa      	bls.n	800569e <_free_r+0x46>
 80056a8:	6811      	ldr	r1, [r2, #0]
 80056aa:	1855      	adds	r5, r2, r1
 80056ac:	42a5      	cmp	r5, r4
 80056ae:	d10b      	bne.n	80056c8 <_free_r+0x70>
 80056b0:	6824      	ldr	r4, [r4, #0]
 80056b2:	4421      	add	r1, r4
 80056b4:	1854      	adds	r4, r2, r1
 80056b6:	42a3      	cmp	r3, r4
 80056b8:	6011      	str	r1, [r2, #0]
 80056ba:	d1e0      	bne.n	800567e <_free_r+0x26>
 80056bc:	681c      	ldr	r4, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	6053      	str	r3, [r2, #4]
 80056c2:	440c      	add	r4, r1
 80056c4:	6014      	str	r4, [r2, #0]
 80056c6:	e7da      	b.n	800567e <_free_r+0x26>
 80056c8:	d902      	bls.n	80056d0 <_free_r+0x78>
 80056ca:	230c      	movs	r3, #12
 80056cc:	6003      	str	r3, [r0, #0]
 80056ce:	e7d6      	b.n	800567e <_free_r+0x26>
 80056d0:	6825      	ldr	r5, [r4, #0]
 80056d2:	1961      	adds	r1, r4, r5
 80056d4:	428b      	cmp	r3, r1
 80056d6:	bf04      	itt	eq
 80056d8:	6819      	ldreq	r1, [r3, #0]
 80056da:	685b      	ldreq	r3, [r3, #4]
 80056dc:	6063      	str	r3, [r4, #4]
 80056de:	bf04      	itt	eq
 80056e0:	1949      	addeq	r1, r1, r5
 80056e2:	6021      	streq	r1, [r4, #0]
 80056e4:	6054      	str	r4, [r2, #4]
 80056e6:	e7ca      	b.n	800567e <_free_r+0x26>
 80056e8:	b003      	add	sp, #12
 80056ea:	bd30      	pop	{r4, r5, pc}
 80056ec:	20000334 	.word	0x20000334

080056f0 <__sflush_r>:
 80056f0:	898a      	ldrh	r2, [r1, #12]
 80056f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f6:	4605      	mov	r5, r0
 80056f8:	0710      	lsls	r0, r2, #28
 80056fa:	460c      	mov	r4, r1
 80056fc:	d458      	bmi.n	80057b0 <__sflush_r+0xc0>
 80056fe:	684b      	ldr	r3, [r1, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	dc05      	bgt.n	8005710 <__sflush_r+0x20>
 8005704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	dc02      	bgt.n	8005710 <__sflush_r+0x20>
 800570a:	2000      	movs	r0, #0
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005712:	2e00      	cmp	r6, #0
 8005714:	d0f9      	beq.n	800570a <__sflush_r+0x1a>
 8005716:	2300      	movs	r3, #0
 8005718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800571c:	682f      	ldr	r7, [r5, #0]
 800571e:	6a21      	ldr	r1, [r4, #32]
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	d032      	beq.n	800578a <__sflush_r+0x9a>
 8005724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	075a      	lsls	r2, r3, #29
 800572a:	d505      	bpl.n	8005738 <__sflush_r+0x48>
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	1ac0      	subs	r0, r0, r3
 8005730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005732:	b10b      	cbz	r3, 8005738 <__sflush_r+0x48>
 8005734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005736:	1ac0      	subs	r0, r0, r3
 8005738:	2300      	movs	r3, #0
 800573a:	4602      	mov	r2, r0
 800573c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800573e:	6a21      	ldr	r1, [r4, #32]
 8005740:	4628      	mov	r0, r5
 8005742:	47b0      	blx	r6
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	d106      	bne.n	8005758 <__sflush_r+0x68>
 800574a:	6829      	ldr	r1, [r5, #0]
 800574c:	291d      	cmp	r1, #29
 800574e:	d82b      	bhi.n	80057a8 <__sflush_r+0xb8>
 8005750:	4a29      	ldr	r2, [pc, #164]	; (80057f8 <__sflush_r+0x108>)
 8005752:	410a      	asrs	r2, r1
 8005754:	07d6      	lsls	r6, r2, #31
 8005756:	d427      	bmi.n	80057a8 <__sflush_r+0xb8>
 8005758:	2200      	movs	r2, #0
 800575a:	6062      	str	r2, [r4, #4]
 800575c:	04d9      	lsls	r1, r3, #19
 800575e:	6922      	ldr	r2, [r4, #16]
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	d504      	bpl.n	800576e <__sflush_r+0x7e>
 8005764:	1c42      	adds	r2, r0, #1
 8005766:	d101      	bne.n	800576c <__sflush_r+0x7c>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b903      	cbnz	r3, 800576e <__sflush_r+0x7e>
 800576c:	6560      	str	r0, [r4, #84]	; 0x54
 800576e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005770:	602f      	str	r7, [r5, #0]
 8005772:	2900      	cmp	r1, #0
 8005774:	d0c9      	beq.n	800570a <__sflush_r+0x1a>
 8005776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800577a:	4299      	cmp	r1, r3
 800577c:	d002      	beq.n	8005784 <__sflush_r+0x94>
 800577e:	4628      	mov	r0, r5
 8005780:	f7ff ff6a 	bl	8005658 <_free_r>
 8005784:	2000      	movs	r0, #0
 8005786:	6360      	str	r0, [r4, #52]	; 0x34
 8005788:	e7c0      	b.n	800570c <__sflush_r+0x1c>
 800578a:	2301      	movs	r3, #1
 800578c:	4628      	mov	r0, r5
 800578e:	47b0      	blx	r6
 8005790:	1c41      	adds	r1, r0, #1
 8005792:	d1c8      	bne.n	8005726 <__sflush_r+0x36>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0c5      	beq.n	8005726 <__sflush_r+0x36>
 800579a:	2b1d      	cmp	r3, #29
 800579c:	d001      	beq.n	80057a2 <__sflush_r+0xb2>
 800579e:	2b16      	cmp	r3, #22
 80057a0:	d101      	bne.n	80057a6 <__sflush_r+0xb6>
 80057a2:	602f      	str	r7, [r5, #0]
 80057a4:	e7b1      	b.n	800570a <__sflush_r+0x1a>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	e7ad      	b.n	800570c <__sflush_r+0x1c>
 80057b0:	690f      	ldr	r7, [r1, #16]
 80057b2:	2f00      	cmp	r7, #0
 80057b4:	d0a9      	beq.n	800570a <__sflush_r+0x1a>
 80057b6:	0793      	lsls	r3, r2, #30
 80057b8:	680e      	ldr	r6, [r1, #0]
 80057ba:	bf08      	it	eq
 80057bc:	694b      	ldreq	r3, [r1, #20]
 80057be:	600f      	str	r7, [r1, #0]
 80057c0:	bf18      	it	ne
 80057c2:	2300      	movne	r3, #0
 80057c4:	eba6 0807 	sub.w	r8, r6, r7
 80057c8:	608b      	str	r3, [r1, #8]
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	dd9c      	ble.n	800570a <__sflush_r+0x1a>
 80057d0:	6a21      	ldr	r1, [r4, #32]
 80057d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057d4:	4643      	mov	r3, r8
 80057d6:	463a      	mov	r2, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	47b0      	blx	r6
 80057dc:	2800      	cmp	r0, #0
 80057de:	dc06      	bgt.n	80057ee <__sflush_r+0xfe>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e6:	81a3      	strh	r3, [r4, #12]
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	e78e      	b.n	800570c <__sflush_r+0x1c>
 80057ee:	4407      	add	r7, r0
 80057f0:	eba8 0800 	sub.w	r8, r8, r0
 80057f4:	e7e9      	b.n	80057ca <__sflush_r+0xda>
 80057f6:	bf00      	nop
 80057f8:	dfbffffe 	.word	0xdfbffffe

080057fc <_fflush_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	4605      	mov	r5, r0
 8005802:	460c      	mov	r4, r1
 8005804:	b913      	cbnz	r3, 800580c <_fflush_r+0x10>
 8005806:	2500      	movs	r5, #0
 8005808:	4628      	mov	r0, r5
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	b118      	cbz	r0, 8005816 <_fflush_r+0x1a>
 800580e:	6a03      	ldr	r3, [r0, #32]
 8005810:	b90b      	cbnz	r3, 8005816 <_fflush_r+0x1a>
 8005812:	f7ff fd2d 	bl	8005270 <__sinit>
 8005816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f3      	beq.n	8005806 <_fflush_r+0xa>
 800581e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005820:	07d0      	lsls	r0, r2, #31
 8005822:	d404      	bmi.n	800582e <_fflush_r+0x32>
 8005824:	0599      	lsls	r1, r3, #22
 8005826:	d402      	bmi.n	800582e <_fflush_r+0x32>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f7ff ff13 	bl	8005654 <__retarget_lock_acquire_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	4621      	mov	r1, r4
 8005832:	f7ff ff5d 	bl	80056f0 <__sflush_r>
 8005836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005838:	07da      	lsls	r2, r3, #31
 800583a:	4605      	mov	r5, r0
 800583c:	d4e4      	bmi.n	8005808 <_fflush_r+0xc>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	d4e1      	bmi.n	8005808 <_fflush_r+0xc>
 8005844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005846:	f7ff ff06 	bl	8005656 <__retarget_lock_release_recursive>
 800584a:	e7dd      	b.n	8005808 <_fflush_r+0xc>

0800584c <__swhatbuf_r>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	460c      	mov	r4, r1
 8005850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005854:	2900      	cmp	r1, #0
 8005856:	b096      	sub	sp, #88	; 0x58
 8005858:	4615      	mov	r5, r2
 800585a:	461e      	mov	r6, r3
 800585c:	da0d      	bge.n	800587a <__swhatbuf_r+0x2e>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	bf0c      	ite	eq
 800586a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800586e:	2340      	movne	r3, #64	; 0x40
 8005870:	2000      	movs	r0, #0
 8005872:	6031      	str	r1, [r6, #0]
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	b016      	add	sp, #88	; 0x58
 8005878:	bd70      	pop	{r4, r5, r6, pc}
 800587a:	466a      	mov	r2, sp
 800587c:	f000 f848 	bl	8005910 <_fstat_r>
 8005880:	2800      	cmp	r0, #0
 8005882:	dbec      	blt.n	800585e <__swhatbuf_r+0x12>
 8005884:	9901      	ldr	r1, [sp, #4]
 8005886:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800588a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800588e:	4259      	negs	r1, r3
 8005890:	4159      	adcs	r1, r3
 8005892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005896:	e7eb      	b.n	8005870 <__swhatbuf_r+0x24>

08005898 <__smakebuf_r>:
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800589c:	079d      	lsls	r5, r3, #30
 800589e:	4606      	mov	r6, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	d507      	bpl.n	80058b4 <__smakebuf_r+0x1c>
 80058a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	2301      	movs	r3, #1
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	b002      	add	sp, #8
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	ab01      	add	r3, sp, #4
 80058b6:	466a      	mov	r2, sp
 80058b8:	f7ff ffc8 	bl	800584c <__swhatbuf_r>
 80058bc:	9900      	ldr	r1, [sp, #0]
 80058be:	4605      	mov	r5, r0
 80058c0:	4630      	mov	r0, r6
 80058c2:	f7ff fbcf 	bl	8005064 <_malloc_r>
 80058c6:	b948      	cbnz	r0, 80058dc <__smakebuf_r+0x44>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	059a      	lsls	r2, r3, #22
 80058ce:	d4ef      	bmi.n	80058b0 <__smakebuf_r+0x18>
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	e7e3      	b.n	80058a4 <__smakebuf_r+0xc>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	6163      	str	r3, [r4, #20]
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	6120      	str	r0, [r4, #16]
 80058ee:	b15b      	cbz	r3, 8005908 <__smakebuf_r+0x70>
 80058f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f4:	4630      	mov	r0, r6
 80058f6:	f000 f81d 	bl	8005934 <_isatty_r>
 80058fa:	b128      	cbz	r0, 8005908 <__smakebuf_r+0x70>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	431d      	orrs	r5, r3
 800590c:	81a5      	strh	r5, [r4, #12]
 800590e:	e7cf      	b.n	80058b0 <__smakebuf_r+0x18>

08005910 <_fstat_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_fstat_r+0x20>)
 8005914:	2300      	movs	r3, #0
 8005916:	4604      	mov	r4, r0
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	602b      	str	r3, [r5, #0]
 800591e:	f7fb f838 	bl	8000992 <_fstat>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d102      	bne.n	800592c <_fstat_r+0x1c>
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	b103      	cbz	r3, 800592c <_fstat_r+0x1c>
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20000478 	.word	0x20000478

08005934 <_isatty_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d06      	ldr	r5, [pc, #24]	; (8005950 <_isatty_r+0x1c>)
 8005938:	2300      	movs	r3, #0
 800593a:	4604      	mov	r4, r0
 800593c:	4608      	mov	r0, r1
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	f7fb f837 	bl	80009b2 <_isatty>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_isatty_r+0x1a>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_isatty_r+0x1a>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20000478 	.word	0x20000478

08005954 <_init>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr

08005960 <_fini>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr
